State 0:
fichier' -> . fichier [ # ]
-- On STRUCT shift to state 1
-- On FN shift to state 21
-- On list(decl) shift to state 149
-- On fichier shift to state 151
-- On decl_struct shift to state 152
-- On decl_fun shift to state 153
-- On decl shift to state 154
-- On EOF reduce production list(decl) -> 

State 1:
decl_struct -> STRUCT . IDENT LEFTG loption(separated_nonempty_list(COMMA,decl_sous_struct)) RIGHTG [ STRUCT FN EOF ]
-- On IDENT shift to state 2

State 2:
decl_struct -> STRUCT IDENT . LEFTG loption(separated_nonempty_list(COMMA,decl_sous_struct)) RIGHTG [ STRUCT FN EOF ]
-- On LEFTG shift to state 3

State 3:
decl_struct -> STRUCT IDENT LEFTG . loption(separated_nonempty_list(COMMA,decl_sous_struct)) RIGHTG [ STRUCT FN EOF ]
-- On IDENT shift to state 4
-- On separated_nonempty_list(COMMA,decl_sous_struct) shift to state 15
-- On loption(separated_nonempty_list(COMMA,decl_sous_struct)) shift to state 16
-- On decl_sous_struct shift to state 18
-- On RIGHTG reduce production loption(separated_nonempty_list(COMMA,decl_sous_struct)) -> 

State 4:
decl_sous_struct -> IDENT . TO typ [ RIGHTG COMMA ]
-- On TO shift to state 5

State 5:
decl_sous_struct -> IDENT TO . typ [ RIGHTG COMMA ]
-- On IDENT shift to state 6
-- On ET shift to state 8
-- On typ shift to state 14

State 6:
typ -> IDENT . [ SUP RIGHTPAR RIGHTG MUT LEFTG IDENT COMMA ]
typ -> IDENT . INF typ SUP [ SUP RIGHTPAR RIGHTG MUT LEFTG IDENT COMMA ]
-- On INF shift to state 7
-- On SUP reduce production typ -> IDENT 
-- On RIGHTPAR reduce production typ -> IDENT 
-- On RIGHTG reduce production typ -> IDENT 
-- On MUT reduce production typ -> IDENT 
-- On LEFTG reduce production typ -> IDENT 
-- On IDENT reduce production typ -> IDENT 
-- On COMMA reduce production typ -> IDENT 

State 7:
typ -> IDENT INF . typ SUP [ SUP RIGHTPAR RIGHTG MUT LEFTG IDENT COMMA ]
-- On IDENT shift to state 6
-- On ET shift to state 8
-- On typ shift to state 12

State 8:
typ -> ET . typ [ SUP RIGHTPAR RIGHTG MUT LEFTG IDENT COMMA ]
typ -> ET . MUT typ [ SUP RIGHTPAR RIGHTG MUT LEFTG IDENT COMMA ]
-- On MUT shift to state 9
-- On IDENT shift to state 6
-- On ET shift to state 8
-- On typ shift to state 11

State 9:
typ -> ET MUT . typ [ SUP RIGHTPAR RIGHTG MUT LEFTG IDENT COMMA ]
-- On IDENT shift to state 6
-- On ET shift to state 8
-- On typ shift to state 10

State 10:
typ -> ET MUT typ . [ SUP RIGHTPAR RIGHTG MUT LEFTG IDENT COMMA ]
-- On SUP reduce production typ -> ET MUT typ 
-- On RIGHTPAR reduce production typ -> ET MUT typ 
-- On RIGHTG reduce production typ -> ET MUT typ 
-- On MUT reduce production typ -> ET MUT typ 
-- On LEFTG reduce production typ -> ET MUT typ 
-- On IDENT reduce production typ -> ET MUT typ 
-- On COMMA reduce production typ -> ET MUT typ 

State 11:
typ -> ET typ . [ SUP RIGHTPAR RIGHTG MUT LEFTG IDENT COMMA ]
-- On SUP reduce production typ -> ET typ 
-- On RIGHTPAR reduce production typ -> ET typ 
-- On RIGHTG reduce production typ -> ET typ 
-- On MUT reduce production typ -> ET typ 
-- On LEFTG reduce production typ -> ET typ 
-- On IDENT reduce production typ -> ET typ 
-- On COMMA reduce production typ -> ET typ 

State 12:
typ -> IDENT INF typ . SUP [ SUP RIGHTPAR RIGHTG MUT LEFTG IDENT COMMA ]
-- On SUP shift to state 13

State 13:
typ -> IDENT INF typ SUP . [ SUP RIGHTPAR RIGHTG MUT LEFTG IDENT COMMA ]
-- On SUP reduce production typ -> IDENT INF typ SUP 
-- On RIGHTPAR reduce production typ -> IDENT INF typ SUP 
-- On RIGHTG reduce production typ -> IDENT INF typ SUP 
-- On MUT reduce production typ -> IDENT INF typ SUP 
-- On LEFTG reduce production typ -> IDENT INF typ SUP 
-- On IDENT reduce production typ -> IDENT INF typ SUP 
-- On COMMA reduce production typ -> IDENT INF typ SUP 

State 14:
decl_sous_struct -> IDENT TO typ . [ RIGHTG COMMA ]
-- On RIGHTG reduce production decl_sous_struct -> IDENT TO typ 
-- On COMMA reduce production decl_sous_struct -> IDENT TO typ 

State 15:
loption(separated_nonempty_list(COMMA,decl_sous_struct)) -> separated_nonempty_list(COMMA,decl_sous_struct) . [ RIGHTG ]
-- On RIGHTG reduce production loption(separated_nonempty_list(COMMA,decl_sous_struct)) -> separated_nonempty_list(COMMA,decl_sous_struct) 

State 16:
decl_struct -> STRUCT IDENT LEFTG loption(separated_nonempty_list(COMMA,decl_sous_struct)) . RIGHTG [ STRUCT FN EOF ]
-- On RIGHTG shift to state 17

State 17:
decl_struct -> STRUCT IDENT LEFTG loption(separated_nonempty_list(COMMA,decl_sous_struct)) RIGHTG . [ STRUCT FN EOF ]
-- On STRUCT reduce production decl_struct -> STRUCT IDENT LEFTG loption(separated_nonempty_list(COMMA,decl_sous_struct)) RIGHTG 
-- On FN reduce production decl_struct -> STRUCT IDENT LEFTG loption(separated_nonempty_list(COMMA,decl_sous_struct)) RIGHTG 
-- On EOF reduce production decl_struct -> STRUCT IDENT LEFTG loption(separated_nonempty_list(COMMA,decl_sous_struct)) RIGHTG 

State 18:
separated_nonempty_list(COMMA,decl_sous_struct) -> decl_sous_struct . [ RIGHTG ]
separated_nonempty_list(COMMA,decl_sous_struct) -> decl_sous_struct . COMMA separated_nonempty_list(COMMA,decl_sous_struct) [ RIGHTG ]
-- On COMMA shift to state 19
-- On RIGHTG reduce production separated_nonempty_list(COMMA,decl_sous_struct) -> decl_sous_struct 

State 19:
separated_nonempty_list(COMMA,decl_sous_struct) -> decl_sous_struct COMMA . separated_nonempty_list(COMMA,decl_sous_struct) [ RIGHTG ]
-- On IDENT shift to state 4
-- On separated_nonempty_list(COMMA,decl_sous_struct) shift to state 20
-- On decl_sous_struct shift to state 18

State 20:
separated_nonempty_list(COMMA,decl_sous_struct) -> decl_sous_struct COMMA separated_nonempty_list(COMMA,decl_sous_struct) . [ RIGHTG ]
-- On RIGHTG reduce production separated_nonempty_list(COMMA,decl_sous_struct) -> decl_sous_struct COMMA separated_nonempty_list(COMMA,decl_sous_struct) 

State 21:
decl_fun -> FN . IDENT LEFTPAR list(argument) RIGHTPAR bloc [ STRUCT FN EOF ]
decl_fun -> FN . IDENT LEFTPAR list(argument) RIGHTPAR MOINS SUP typ bloc [ STRUCT FN EOF ]
-- On IDENT shift to state 22

State 22:
decl_fun -> FN IDENT . LEFTPAR list(argument) RIGHTPAR bloc [ STRUCT FN EOF ]
decl_fun -> FN IDENT . LEFTPAR list(argument) RIGHTPAR MOINS SUP typ bloc [ STRUCT FN EOF ]
-- On LEFTPAR shift to state 23

State 23:
decl_fun -> FN IDENT LEFTPAR . list(argument) RIGHTPAR bloc [ STRUCT FN EOF ]
decl_fun -> FN IDENT LEFTPAR . list(argument) RIGHTPAR MOINS SUP typ bloc [ STRUCT FN EOF ]
-- On MUT shift to state 24
-- On list(argument) shift to state 25
-- On boption(MUT) shift to state 143
-- On argument shift to state 147
-- On RIGHTPAR reduce production list(argument) -> 
-- On IDENT reduce production boption(MUT) -> 

State 24:
boption(MUT) -> MUT . [ IDENT ]
-- On IDENT reduce production boption(MUT) -> MUT 

State 25:
decl_fun -> FN IDENT LEFTPAR list(argument) . RIGHTPAR bloc [ STRUCT FN EOF ]
decl_fun -> FN IDENT LEFTPAR list(argument) . RIGHTPAR MOINS SUP typ bloc [ STRUCT FN EOF ]
-- On RIGHTPAR shift to state 26

State 26:
decl_fun -> FN IDENT LEFTPAR list(argument) RIGHTPAR . bloc [ STRUCT FN EOF ]
decl_fun -> FN IDENT LEFTPAR list(argument) RIGHTPAR . MOINS SUP typ bloc [ STRUCT FN EOF ]
-- On MOINS shift to state 27
-- On LEFTG shift to state 30
-- On bloc shift to state 142

State 27:
decl_fun -> FN IDENT LEFTPAR list(argument) RIGHTPAR MOINS . SUP typ bloc [ STRUCT FN EOF ]
-- On SUP shift to state 28

State 28:
decl_fun -> FN IDENT LEFTPAR list(argument) RIGHTPAR MOINS SUP . typ bloc [ STRUCT FN EOF ]
-- On IDENT shift to state 6
-- On ET shift to state 8
-- On typ shift to state 29

State 29:
decl_fun -> FN IDENT LEFTPAR list(argument) RIGHTPAR MOINS SUP typ . bloc [ STRUCT FN EOF ]
-- On LEFTG shift to state 30
-- On bloc shift to state 141

State 30:
bloc -> LEFTG . blockbody RIGHTG [ WHILE VEC Tint TRUE SUPEGAL SUP STRUCT RIGHTPAR RIGHTG RIGHTC RETURN PRINT POINT PLUS OR NOTEGAL MOINS MOD LET LEFTPAR LEFTG LEFTC INFEGAL INF IF IDENT FOIS FN FALSE EXCL ETMUT ET EOF ENDLINE ELSE EGAL DIVISE DBLEGAL COMMA AND ]
-- On WHILE shift to state 31
-- On VEC shift to state 32
-- On Tint shift to state 35
-- On TRUE shift to state 36
-- On RETURN shift to state 105
-- On PRINT shift to state 37
-- On MOINS shift to state 42
-- On LET shift to state 109
-- On LEFTPAR shift to state 43
-- On LEFTG shift to state 30
-- On IF shift to state 127
-- On IDENT shift to state 44
-- On FOIS shift to state 46
-- On FALSE shift to state 47
-- On EXCL shift to state 48
-- On ETMUT shift to state 49
-- On ET shift to state 50
-- On ENDLINE shift to state 133
-- On instr shift to state 134
-- On ifb shift to state 135
-- On expr shift to state 136
-- On blockbody shift to state 139
-- On bloc shift to state 65

State 31:
instr -> WHILE . expr bloc [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
-- On VEC shift to state 32
-- On Tint shift to state 35
-- On TRUE shift to state 36
-- On PRINT shift to state 37
-- On MOINS shift to state 42
-- On LEFTPAR shift to state 43
-- On LEFTG shift to state 30
-- On IDENT shift to state 44
-- On FOIS shift to state 46
-- On FALSE shift to state 47
-- On EXCL shift to state 48
-- On ETMUT shift to state 49
-- On ET shift to state 50
-- On expr shift to state 103
-- On bloc shift to state 65

State 32:
expr -> VEC . EXCL LEFTC loption(separated_nonempty_list(COMMA,expr)) RIGHTC [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On EXCL shift to state 33

State 33:
expr -> VEC EXCL . LEFTC loption(separated_nonempty_list(COMMA,expr)) RIGHTC [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On LEFTC shift to state 34

State 34:
expr -> VEC EXCL LEFTC . loption(separated_nonempty_list(COMMA,expr)) RIGHTC [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On VEC shift to state 32
-- On Tint shift to state 35
-- On TRUE shift to state 36
-- On PRINT shift to state 37
-- On MOINS shift to state 42
-- On LEFTPAR shift to state 43
-- On LEFTG shift to state 30
-- On IDENT shift to state 44
-- On FOIS shift to state 46
-- On FALSE shift to state 47
-- On EXCL shift to state 48
-- On ETMUT shift to state 49
-- On ET shift to state 50
-- On separated_nonempty_list(COMMA,expr) shift to state 92
-- On loption(separated_nonempty_list(COMMA,expr)) shift to state 101
-- On expr shift to state 95
-- On bloc shift to state 65
-- On RIGHTC reduce production loption(separated_nonempty_list(COMMA,expr)) -> 

State 35:
expr -> Tint . [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On SUPEGAL reduce production expr -> Tint 
-- On SUP reduce production expr -> Tint 
-- On RIGHTPAR reduce production expr -> Tint 
-- On RIGHTG reduce production expr -> Tint 
-- On RIGHTC reduce production expr -> Tint 
-- On POINT reduce production expr -> Tint 
-- On PLUS reduce production expr -> Tint 
-- On OR reduce production expr -> Tint 
-- On NOTEGAL reduce production expr -> Tint 
-- On MOINS reduce production expr -> Tint 
-- On MOD reduce production expr -> Tint 
-- On LEFTG reduce production expr -> Tint 
-- On LEFTC reduce production expr -> Tint 
-- On INFEGAL reduce production expr -> Tint 
-- On INF reduce production expr -> Tint 
-- On FOIS reduce production expr -> Tint 
-- On ENDLINE reduce production expr -> Tint 
-- On EGAL reduce production expr -> Tint 
-- On DIVISE reduce production expr -> Tint 
-- On DBLEGAL reduce production expr -> Tint 
-- On COMMA reduce production expr -> Tint 
-- On AND reduce production expr -> Tint 

State 36:
expr -> TRUE . [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On SUPEGAL reduce production expr -> TRUE 
-- On SUP reduce production expr -> TRUE 
-- On RIGHTPAR reduce production expr -> TRUE 
-- On RIGHTG reduce production expr -> TRUE 
-- On RIGHTC reduce production expr -> TRUE 
-- On POINT reduce production expr -> TRUE 
-- On PLUS reduce production expr -> TRUE 
-- On OR reduce production expr -> TRUE 
-- On NOTEGAL reduce production expr -> TRUE 
-- On MOINS reduce production expr -> TRUE 
-- On MOD reduce production expr -> TRUE 
-- On LEFTG reduce production expr -> TRUE 
-- On LEFTC reduce production expr -> TRUE 
-- On INFEGAL reduce production expr -> TRUE 
-- On INF reduce production expr -> TRUE 
-- On FOIS reduce production expr -> TRUE 
-- On ENDLINE reduce production expr -> TRUE 
-- On EGAL reduce production expr -> TRUE 
-- On DIVISE reduce production expr -> TRUE 
-- On DBLEGAL reduce production expr -> TRUE 
-- On COMMA reduce production expr -> TRUE 
-- On AND reduce production expr -> TRUE 

State 37:
expr -> PRINT . EXCL LEFTPAR Tstring RIGHTPAR [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On EXCL shift to state 38

State 38:
expr -> PRINT EXCL . LEFTPAR Tstring RIGHTPAR [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On LEFTPAR shift to state 39

State 39:
expr -> PRINT EXCL LEFTPAR . Tstring RIGHTPAR [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On Tstring shift to state 40

State 40:
expr -> PRINT EXCL LEFTPAR Tstring . RIGHTPAR [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On RIGHTPAR shift to state 41

State 41:
expr -> PRINT EXCL LEFTPAR Tstring RIGHTPAR . [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On SUPEGAL reduce production expr -> PRINT EXCL LEFTPAR Tstring RIGHTPAR 
-- On SUP reduce production expr -> PRINT EXCL LEFTPAR Tstring RIGHTPAR 
-- On RIGHTPAR reduce production expr -> PRINT EXCL LEFTPAR Tstring RIGHTPAR 
-- On RIGHTG reduce production expr -> PRINT EXCL LEFTPAR Tstring RIGHTPAR 
-- On RIGHTC reduce production expr -> PRINT EXCL LEFTPAR Tstring RIGHTPAR 
-- On POINT reduce production expr -> PRINT EXCL LEFTPAR Tstring RIGHTPAR 
-- On PLUS reduce production expr -> PRINT EXCL LEFTPAR Tstring RIGHTPAR 
-- On OR reduce production expr -> PRINT EXCL LEFTPAR Tstring RIGHTPAR 
-- On NOTEGAL reduce production expr -> PRINT EXCL LEFTPAR Tstring RIGHTPAR 
-- On MOINS reduce production expr -> PRINT EXCL LEFTPAR Tstring RIGHTPAR 
-- On MOD reduce production expr -> PRINT EXCL LEFTPAR Tstring RIGHTPAR 
-- On LEFTG reduce production expr -> PRINT EXCL LEFTPAR Tstring RIGHTPAR 
-- On LEFTC reduce production expr -> PRINT EXCL LEFTPAR Tstring RIGHTPAR 
-- On INFEGAL reduce production expr -> PRINT EXCL LEFTPAR Tstring RIGHTPAR 
-- On INF reduce production expr -> PRINT EXCL LEFTPAR Tstring RIGHTPAR 
-- On FOIS reduce production expr -> PRINT EXCL LEFTPAR Tstring RIGHTPAR 
-- On ENDLINE reduce production expr -> PRINT EXCL LEFTPAR Tstring RIGHTPAR 
-- On EGAL reduce production expr -> PRINT EXCL LEFTPAR Tstring RIGHTPAR 
-- On DIVISE reduce production expr -> PRINT EXCL LEFTPAR Tstring RIGHTPAR 
-- On DBLEGAL reduce production expr -> PRINT EXCL LEFTPAR Tstring RIGHTPAR 
-- On COMMA reduce production expr -> PRINT EXCL LEFTPAR Tstring RIGHTPAR 
-- On AND reduce production expr -> PRINT EXCL LEFTPAR Tstring RIGHTPAR 

State 42:
expr -> MOINS . expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On VEC shift to state 32
-- On Tint shift to state 35
-- On TRUE shift to state 36
-- On PRINT shift to state 37
-- On MOINS shift to state 42
-- On LEFTPAR shift to state 43
-- On LEFTG shift to state 30
-- On IDENT shift to state 44
-- On FOIS shift to state 46
-- On FALSE shift to state 47
-- On EXCL shift to state 48
-- On ETMUT shift to state 49
-- On ET shift to state 50
-- On expr shift to state 100
-- On bloc shift to state 65

State 43:
expr -> LEFTPAR . expr RIGHTPAR [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On VEC shift to state 32
-- On Tint shift to state 35
-- On TRUE shift to state 36
-- On PRINT shift to state 37
-- On MOINS shift to state 42
-- On LEFTPAR shift to state 43
-- On LEFTG shift to state 30
-- On IDENT shift to state 44
-- On FOIS shift to state 46
-- On FALSE shift to state 47
-- On EXCL shift to state 48
-- On ETMUT shift to state 49
-- On ET shift to state 50
-- On expr shift to state 98
-- On bloc shift to state 65

State 44:
expr -> IDENT . [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> IDENT . LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On LEFTPAR shift to state 45
-- On SUPEGAL reduce production expr -> IDENT 
-- On SUP reduce production expr -> IDENT 
-- On RIGHTPAR reduce production expr -> IDENT 
-- On RIGHTG reduce production expr -> IDENT 
-- On RIGHTC reduce production expr -> IDENT 
-- On POINT reduce production expr -> IDENT 
-- On PLUS reduce production expr -> IDENT 
-- On OR reduce production expr -> IDENT 
-- On NOTEGAL reduce production expr -> IDENT 
-- On MOINS reduce production expr -> IDENT 
-- On MOD reduce production expr -> IDENT 
-- On LEFTG reduce production expr -> IDENT 
-- On LEFTC reduce production expr -> IDENT 
-- On INFEGAL reduce production expr -> IDENT 
-- On INF reduce production expr -> IDENT 
-- On FOIS reduce production expr -> IDENT 
-- On ENDLINE reduce production expr -> IDENT 
-- On EGAL reduce production expr -> IDENT 
-- On DIVISE reduce production expr -> IDENT 
-- On DBLEGAL reduce production expr -> IDENT 
-- On COMMA reduce production expr -> IDENT 
-- On AND reduce production expr -> IDENT 

State 45:
expr -> IDENT LEFTPAR . loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On VEC shift to state 32
-- On Tint shift to state 35
-- On TRUE shift to state 36
-- On PRINT shift to state 37
-- On MOINS shift to state 42
-- On LEFTPAR shift to state 43
-- On LEFTG shift to state 30
-- On IDENT shift to state 44
-- On FOIS shift to state 46
-- On FALSE shift to state 47
-- On EXCL shift to state 48
-- On ETMUT shift to state 49
-- On ET shift to state 50
-- On separated_nonempty_list(COMMA,expr) shift to state 92
-- On loption(separated_nonempty_list(COMMA,expr)) shift to state 93
-- On expr shift to state 95
-- On bloc shift to state 65
-- On RIGHTPAR reduce production loption(separated_nonempty_list(COMMA,expr)) -> 

State 46:
expr -> FOIS . expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On VEC shift to state 32
-- On Tint shift to state 35
-- On TRUE shift to state 36
-- On PRINT shift to state 37
-- On MOINS shift to state 42
-- On LEFTPAR shift to state 43
-- On LEFTG shift to state 30
-- On IDENT shift to state 44
-- On FOIS shift to state 46
-- On FALSE shift to state 47
-- On EXCL shift to state 48
-- On ETMUT shift to state 49
-- On ET shift to state 50
-- On expr shift to state 91
-- On bloc shift to state 65

State 47:
expr -> FALSE . [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On SUPEGAL reduce production expr -> FALSE 
-- On SUP reduce production expr -> FALSE 
-- On RIGHTPAR reduce production expr -> FALSE 
-- On RIGHTG reduce production expr -> FALSE 
-- On RIGHTC reduce production expr -> FALSE 
-- On POINT reduce production expr -> FALSE 
-- On PLUS reduce production expr -> FALSE 
-- On OR reduce production expr -> FALSE 
-- On NOTEGAL reduce production expr -> FALSE 
-- On MOINS reduce production expr -> FALSE 
-- On MOD reduce production expr -> FALSE 
-- On LEFTG reduce production expr -> FALSE 
-- On LEFTC reduce production expr -> FALSE 
-- On INFEGAL reduce production expr -> FALSE 
-- On INF reduce production expr -> FALSE 
-- On FOIS reduce production expr -> FALSE 
-- On ENDLINE reduce production expr -> FALSE 
-- On EGAL reduce production expr -> FALSE 
-- On DIVISE reduce production expr -> FALSE 
-- On DBLEGAL reduce production expr -> FALSE 
-- On COMMA reduce production expr -> FALSE 
-- On AND reduce production expr -> FALSE 

State 48:
expr -> EXCL . expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On VEC shift to state 32
-- On Tint shift to state 35
-- On TRUE shift to state 36
-- On PRINT shift to state 37
-- On MOINS shift to state 42
-- On LEFTPAR shift to state 43
-- On LEFTG shift to state 30
-- On IDENT shift to state 44
-- On FOIS shift to state 46
-- On FALSE shift to state 47
-- On EXCL shift to state 48
-- On ETMUT shift to state 49
-- On ET shift to state 50
-- On expr shift to state 90
-- On bloc shift to state 65

State 49:
expr -> ETMUT . expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On VEC shift to state 32
-- On Tint shift to state 35
-- On TRUE shift to state 36
-- On PRINT shift to state 37
-- On MOINS shift to state 42
-- On LEFTPAR shift to state 43
-- On LEFTG shift to state 30
-- On IDENT shift to state 44
-- On FOIS shift to state 46
-- On FALSE shift to state 47
-- On EXCL shift to state 48
-- On ETMUT shift to state 49
-- On ET shift to state 50
-- On expr shift to state 89
-- On bloc shift to state 65

State 50:
expr -> ET . expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On VEC shift to state 32
-- On Tint shift to state 35
-- On TRUE shift to state 36
-- On PRINT shift to state 37
-- On MOINS shift to state 42
-- On LEFTPAR shift to state 43
-- On LEFTG shift to state 30
-- On IDENT shift to state 44
-- On FOIS shift to state 46
-- On FALSE shift to state 47
-- On EXCL shift to state 48
-- On ETMUT shift to state 49
-- On ET shift to state 50
-- On expr shift to state 51
-- On bloc shift to state 65

State 51:
expr -> expr . DBLEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . NOTEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INF expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INFEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUP expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUPEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . PLUS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOINS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . FOIS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . DIVISE expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOD expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . AND expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . OR expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . EGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> ET expr . [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT IDENT [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT LEN LEFTG RIGHTG [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . LEFTC expr RIGHTC [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On POINT shift to state 52
-- On LEFTC shift to state 57
-- On SUPEGAL reduce production expr -> ET expr 
-- On SUP reduce production expr -> ET expr 
-- On RIGHTPAR reduce production expr -> ET expr 
-- On RIGHTG reduce production expr -> ET expr 
-- On RIGHTC reduce production expr -> ET expr 
-- On PLUS reduce production expr -> ET expr 
-- On OR reduce production expr -> ET expr 
-- On NOTEGAL reduce production expr -> ET expr 
-- On MOINS reduce production expr -> ET expr 
-- On MOD reduce production expr -> ET expr 
-- On LEFTG reduce production expr -> ET expr 
-- On INFEGAL reduce production expr -> ET expr 
-- On INF reduce production expr -> ET expr 
-- On FOIS reduce production expr -> ET expr 
-- On ENDLINE reduce production expr -> ET expr 
-- On EGAL reduce production expr -> ET expr 
-- On DIVISE reduce production expr -> ET expr 
-- On DBLEGAL reduce production expr -> ET expr 
-- On COMMA reduce production expr -> ET expr 
-- On AND reduce production expr -> ET expr 

State 52:
expr -> expr POINT . IDENT [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr POINT . LEN LEFTG RIGHTG [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On LEN shift to state 53
-- On IDENT shift to state 56

State 53:
expr -> expr POINT LEN . LEFTG RIGHTG [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On LEFTG shift to state 54

State 54:
expr -> expr POINT LEN LEFTG . RIGHTG [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On RIGHTG shift to state 55

State 55:
expr -> expr POINT LEN LEFTG RIGHTG . [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On SUPEGAL reduce production expr -> expr POINT LEN LEFTG RIGHTG 
-- On SUP reduce production expr -> expr POINT LEN LEFTG RIGHTG 
-- On RIGHTPAR reduce production expr -> expr POINT LEN LEFTG RIGHTG 
-- On RIGHTG reduce production expr -> expr POINT LEN LEFTG RIGHTG 
-- On RIGHTC reduce production expr -> expr POINT LEN LEFTG RIGHTG 
-- On POINT reduce production expr -> expr POINT LEN LEFTG RIGHTG 
-- On PLUS reduce production expr -> expr POINT LEN LEFTG RIGHTG 
-- On OR reduce production expr -> expr POINT LEN LEFTG RIGHTG 
-- On NOTEGAL reduce production expr -> expr POINT LEN LEFTG RIGHTG 
-- On MOINS reduce production expr -> expr POINT LEN LEFTG RIGHTG 
-- On MOD reduce production expr -> expr POINT LEN LEFTG RIGHTG 
-- On LEFTG reduce production expr -> expr POINT LEN LEFTG RIGHTG 
-- On LEFTC reduce production expr -> expr POINT LEN LEFTG RIGHTG 
-- On INFEGAL reduce production expr -> expr POINT LEN LEFTG RIGHTG 
-- On INF reduce production expr -> expr POINT LEN LEFTG RIGHTG 
-- On FOIS reduce production expr -> expr POINT LEN LEFTG RIGHTG 
-- On ENDLINE reduce production expr -> expr POINT LEN LEFTG RIGHTG 
-- On EGAL reduce production expr -> expr POINT LEN LEFTG RIGHTG 
-- On DIVISE reduce production expr -> expr POINT LEN LEFTG RIGHTG 
-- On DBLEGAL reduce production expr -> expr POINT LEN LEFTG RIGHTG 
-- On COMMA reduce production expr -> expr POINT LEN LEFTG RIGHTG 
-- On AND reduce production expr -> expr POINT LEN LEFTG RIGHTG 

State 56:
expr -> expr POINT IDENT . [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On SUPEGAL reduce production expr -> expr POINT IDENT 
-- On SUP reduce production expr -> expr POINT IDENT 
-- On RIGHTPAR reduce production expr -> expr POINT IDENT 
-- On RIGHTG reduce production expr -> expr POINT IDENT 
-- On RIGHTC reduce production expr -> expr POINT IDENT 
-- On POINT reduce production expr -> expr POINT IDENT 
-- On PLUS reduce production expr -> expr POINT IDENT 
-- On OR reduce production expr -> expr POINT IDENT 
-- On NOTEGAL reduce production expr -> expr POINT IDENT 
-- On MOINS reduce production expr -> expr POINT IDENT 
-- On MOD reduce production expr -> expr POINT IDENT 
-- On LEFTG reduce production expr -> expr POINT IDENT 
-- On LEFTC reduce production expr -> expr POINT IDENT 
-- On INFEGAL reduce production expr -> expr POINT IDENT 
-- On INF reduce production expr -> expr POINT IDENT 
-- On FOIS reduce production expr -> expr POINT IDENT 
-- On ENDLINE reduce production expr -> expr POINT IDENT 
-- On EGAL reduce production expr -> expr POINT IDENT 
-- On DIVISE reduce production expr -> expr POINT IDENT 
-- On DBLEGAL reduce production expr -> expr POINT IDENT 
-- On COMMA reduce production expr -> expr POINT IDENT 
-- On AND reduce production expr -> expr POINT IDENT 

State 57:
expr -> expr LEFTC . expr RIGHTC [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On VEC shift to state 32
-- On Tint shift to state 35
-- On TRUE shift to state 36
-- On PRINT shift to state 37
-- On MOINS shift to state 42
-- On LEFTPAR shift to state 43
-- On LEFTG shift to state 30
-- On IDENT shift to state 44
-- On FOIS shift to state 46
-- On FALSE shift to state 47
-- On EXCL shift to state 48
-- On ETMUT shift to state 49
-- On ET shift to state 50
-- On expr shift to state 58
-- On bloc shift to state 65

State 58:
expr -> expr . DBLEGAL expr [ SUPEGAL SUP RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . NOTEGAL expr [ SUPEGAL SUP RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . INF expr [ SUPEGAL SUP RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . INFEGAL expr [ SUPEGAL SUP RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . SUP expr [ SUPEGAL SUP RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . SUPEGAL expr [ SUPEGAL SUP RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . PLUS expr [ SUPEGAL SUP RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . MOINS expr [ SUPEGAL SUP RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . FOIS expr [ SUPEGAL SUP RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . DIVISE expr [ SUPEGAL SUP RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . MOD expr [ SUPEGAL SUP RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . AND expr [ SUPEGAL SUP RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . OR expr [ SUPEGAL SUP RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . EGAL expr [ SUPEGAL SUP RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . POINT IDENT [ SUPEGAL SUP RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . POINT LEN LEFTG RIGHTG [ SUPEGAL SUP RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . LEFTC expr RIGHTC [ SUPEGAL SUP RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr LEFTC expr . RIGHTC [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On SUPEGAL shift to state 59
-- On SUP shift to state 72
-- On RIGHTC shift to state 74
-- On POINT shift to state 52
-- On PLUS shift to state 61
-- On OR shift to state 75
-- On NOTEGAL shift to state 77
-- On MOINS shift to state 70
-- On MOD shift to state 63
-- On LEFTC shift to state 57
-- On INFEGAL shift to state 79
-- On INF shift to state 81
-- On FOIS shift to state 66
-- On EGAL shift to state 87
-- On DIVISE shift to state 68
-- On DBLEGAL shift to state 83
-- On AND shift to state 85

State 59:
expr -> expr SUPEGAL . expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On VEC shift to state 32
-- On Tint shift to state 35
-- On TRUE shift to state 36
-- On PRINT shift to state 37
-- On MOINS shift to state 42
-- On LEFTPAR shift to state 43
-- On LEFTG shift to state 30
-- On IDENT shift to state 44
-- On FOIS shift to state 46
-- On FALSE shift to state 47
-- On EXCL shift to state 48
-- On ETMUT shift to state 49
-- On ET shift to state 50
-- On expr shift to state 60
-- On bloc shift to state 65

State 60:
expr -> expr . DBLEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . NOTEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INF expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INFEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUP expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUPEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr SUPEGAL expr . [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . PLUS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOINS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . FOIS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . DIVISE expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOD expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . AND expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . OR expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . EGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT IDENT [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT LEN LEFTG RIGHTG [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . LEFTC expr RIGHTC [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On POINT shift to state 52
-- On PLUS shift to state 61
-- On MOINS shift to state 70
-- On MOD shift to state 63
-- On LEFTC shift to state 57
-- On FOIS shift to state 66
-- On DIVISE shift to state 68
-- On RIGHTPAR reduce production expr -> expr SUPEGAL expr 
-- On RIGHTG reduce production expr -> expr SUPEGAL expr 
-- On RIGHTC reduce production expr -> expr SUPEGAL expr 
-- On OR reduce production expr -> expr SUPEGAL expr 
-- On LEFTG reduce production expr -> expr SUPEGAL expr 
-- On ENDLINE reduce production expr -> expr SUPEGAL expr 
-- On EGAL reduce production expr -> expr SUPEGAL expr 
-- On COMMA reduce production expr -> expr SUPEGAL expr 
-- On AND reduce production expr -> expr SUPEGAL expr 

State 61:
expr -> expr PLUS . expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On VEC shift to state 32
-- On Tint shift to state 35
-- On TRUE shift to state 36
-- On PRINT shift to state 37
-- On MOINS shift to state 42
-- On LEFTPAR shift to state 43
-- On LEFTG shift to state 30
-- On IDENT shift to state 44
-- On FOIS shift to state 46
-- On FALSE shift to state 47
-- On EXCL shift to state 48
-- On ETMUT shift to state 49
-- On ET shift to state 50
-- On expr shift to state 62
-- On bloc shift to state 65

State 62:
expr -> expr . DBLEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . NOTEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INF expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INFEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUP expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUPEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . PLUS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr PLUS expr . [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOINS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . FOIS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . DIVISE expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOD expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . AND expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . OR expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . EGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT IDENT [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT LEN LEFTG RIGHTG [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . LEFTC expr RIGHTC [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On POINT shift to state 52
-- On MOD shift to state 63
-- On LEFTC shift to state 57
-- On FOIS shift to state 66
-- On DIVISE shift to state 68
-- On SUPEGAL reduce production expr -> expr PLUS expr 
-- On SUP reduce production expr -> expr PLUS expr 
-- On RIGHTPAR reduce production expr -> expr PLUS expr 
-- On RIGHTG reduce production expr -> expr PLUS expr 
-- On RIGHTC reduce production expr -> expr PLUS expr 
-- On PLUS reduce production expr -> expr PLUS expr 
-- On OR reduce production expr -> expr PLUS expr 
-- On NOTEGAL reduce production expr -> expr PLUS expr 
-- On MOINS reduce production expr -> expr PLUS expr 
-- On LEFTG reduce production expr -> expr PLUS expr 
-- On INFEGAL reduce production expr -> expr PLUS expr 
-- On INF reduce production expr -> expr PLUS expr 
-- On ENDLINE reduce production expr -> expr PLUS expr 
-- On EGAL reduce production expr -> expr PLUS expr 
-- On DBLEGAL reduce production expr -> expr PLUS expr 
-- On COMMA reduce production expr -> expr PLUS expr 
-- On AND reduce production expr -> expr PLUS expr 

State 63:
expr -> expr MOD . expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On VEC shift to state 32
-- On Tint shift to state 35
-- On TRUE shift to state 36
-- On PRINT shift to state 37
-- On MOINS shift to state 42
-- On LEFTPAR shift to state 43
-- On LEFTG shift to state 30
-- On IDENT shift to state 44
-- On FOIS shift to state 46
-- On FALSE shift to state 47
-- On EXCL shift to state 48
-- On ETMUT shift to state 49
-- On ET shift to state 50
-- On expr shift to state 64
-- On bloc shift to state 65

State 64:
expr -> expr . DBLEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . NOTEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INF expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INFEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUP expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUPEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . PLUS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOINS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . FOIS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . DIVISE expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOD expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr MOD expr . [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . AND expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . OR expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . EGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT IDENT [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT LEN LEFTG RIGHTG [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . LEFTC expr RIGHTC [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On POINT shift to state 52
-- On LEFTC shift to state 57
-- On SUPEGAL reduce production expr -> expr MOD expr 
-- On SUP reduce production expr -> expr MOD expr 
-- On RIGHTPAR reduce production expr -> expr MOD expr 
-- On RIGHTG reduce production expr -> expr MOD expr 
-- On RIGHTC reduce production expr -> expr MOD expr 
-- On PLUS reduce production expr -> expr MOD expr 
-- On OR reduce production expr -> expr MOD expr 
-- On NOTEGAL reduce production expr -> expr MOD expr 
-- On MOINS reduce production expr -> expr MOD expr 
-- On MOD reduce production expr -> expr MOD expr 
-- On LEFTG reduce production expr -> expr MOD expr 
-- On INFEGAL reduce production expr -> expr MOD expr 
-- On INF reduce production expr -> expr MOD expr 
-- On FOIS reduce production expr -> expr MOD expr 
-- On ENDLINE reduce production expr -> expr MOD expr 
-- On EGAL reduce production expr -> expr MOD expr 
-- On DIVISE reduce production expr -> expr MOD expr 
-- On DBLEGAL reduce production expr -> expr MOD expr 
-- On COMMA reduce production expr -> expr MOD expr 
-- On AND reduce production expr -> expr MOD expr 

State 65:
expr -> bloc . [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On SUPEGAL reduce production expr -> bloc 
-- On SUP reduce production expr -> bloc 
-- On RIGHTPAR reduce production expr -> bloc 
-- On RIGHTG reduce production expr -> bloc 
-- On RIGHTC reduce production expr -> bloc 
-- On POINT reduce production expr -> bloc 
-- On PLUS reduce production expr -> bloc 
-- On OR reduce production expr -> bloc 
-- On NOTEGAL reduce production expr -> bloc 
-- On MOINS reduce production expr -> bloc 
-- On MOD reduce production expr -> bloc 
-- On LEFTG reduce production expr -> bloc 
-- On LEFTC reduce production expr -> bloc 
-- On INFEGAL reduce production expr -> bloc 
-- On INF reduce production expr -> bloc 
-- On FOIS reduce production expr -> bloc 
-- On ENDLINE reduce production expr -> bloc 
-- On EGAL reduce production expr -> bloc 
-- On DIVISE reduce production expr -> bloc 
-- On DBLEGAL reduce production expr -> bloc 
-- On COMMA reduce production expr -> bloc 
-- On AND reduce production expr -> bloc 

State 66:
expr -> expr FOIS . expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On VEC shift to state 32
-- On Tint shift to state 35
-- On TRUE shift to state 36
-- On PRINT shift to state 37
-- On MOINS shift to state 42
-- On LEFTPAR shift to state 43
-- On LEFTG shift to state 30
-- On IDENT shift to state 44
-- On FOIS shift to state 46
-- On FALSE shift to state 47
-- On EXCL shift to state 48
-- On ETMUT shift to state 49
-- On ET shift to state 50
-- On expr shift to state 67
-- On bloc shift to state 65

State 67:
expr -> expr . DBLEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . NOTEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INF expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INFEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUP expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUPEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . PLUS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOINS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . FOIS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr FOIS expr . [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . DIVISE expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOD expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . AND expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . OR expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . EGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT IDENT [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT LEN LEFTG RIGHTG [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . LEFTC expr RIGHTC [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On POINT shift to state 52
-- On LEFTC shift to state 57
-- On SUPEGAL reduce production expr -> expr FOIS expr 
-- On SUP reduce production expr -> expr FOIS expr 
-- On RIGHTPAR reduce production expr -> expr FOIS expr 
-- On RIGHTG reduce production expr -> expr FOIS expr 
-- On RIGHTC reduce production expr -> expr FOIS expr 
-- On PLUS reduce production expr -> expr FOIS expr 
-- On OR reduce production expr -> expr FOIS expr 
-- On NOTEGAL reduce production expr -> expr FOIS expr 
-- On MOINS reduce production expr -> expr FOIS expr 
-- On MOD reduce production expr -> expr FOIS expr 
-- On LEFTG reduce production expr -> expr FOIS expr 
-- On INFEGAL reduce production expr -> expr FOIS expr 
-- On INF reduce production expr -> expr FOIS expr 
-- On FOIS reduce production expr -> expr FOIS expr 
-- On ENDLINE reduce production expr -> expr FOIS expr 
-- On EGAL reduce production expr -> expr FOIS expr 
-- On DIVISE reduce production expr -> expr FOIS expr 
-- On DBLEGAL reduce production expr -> expr FOIS expr 
-- On COMMA reduce production expr -> expr FOIS expr 
-- On AND reduce production expr -> expr FOIS expr 

State 68:
expr -> expr DIVISE . expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On VEC shift to state 32
-- On Tint shift to state 35
-- On TRUE shift to state 36
-- On PRINT shift to state 37
-- On MOINS shift to state 42
-- On LEFTPAR shift to state 43
-- On LEFTG shift to state 30
-- On IDENT shift to state 44
-- On FOIS shift to state 46
-- On FALSE shift to state 47
-- On EXCL shift to state 48
-- On ETMUT shift to state 49
-- On ET shift to state 50
-- On expr shift to state 69
-- On bloc shift to state 65

State 69:
expr -> expr . DBLEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . NOTEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INF expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INFEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUP expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUPEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . PLUS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOINS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . FOIS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . DIVISE expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr DIVISE expr . [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOD expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . AND expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . OR expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . EGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT IDENT [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT LEN LEFTG RIGHTG [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . LEFTC expr RIGHTC [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On POINT shift to state 52
-- On LEFTC shift to state 57
-- On SUPEGAL reduce production expr -> expr DIVISE expr 
-- On SUP reduce production expr -> expr DIVISE expr 
-- On RIGHTPAR reduce production expr -> expr DIVISE expr 
-- On RIGHTG reduce production expr -> expr DIVISE expr 
-- On RIGHTC reduce production expr -> expr DIVISE expr 
-- On PLUS reduce production expr -> expr DIVISE expr 
-- On OR reduce production expr -> expr DIVISE expr 
-- On NOTEGAL reduce production expr -> expr DIVISE expr 
-- On MOINS reduce production expr -> expr DIVISE expr 
-- On MOD reduce production expr -> expr DIVISE expr 
-- On LEFTG reduce production expr -> expr DIVISE expr 
-- On INFEGAL reduce production expr -> expr DIVISE expr 
-- On INF reduce production expr -> expr DIVISE expr 
-- On FOIS reduce production expr -> expr DIVISE expr 
-- On ENDLINE reduce production expr -> expr DIVISE expr 
-- On EGAL reduce production expr -> expr DIVISE expr 
-- On DIVISE reduce production expr -> expr DIVISE expr 
-- On DBLEGAL reduce production expr -> expr DIVISE expr 
-- On COMMA reduce production expr -> expr DIVISE expr 
-- On AND reduce production expr -> expr DIVISE expr 

State 70:
expr -> expr MOINS . expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On VEC shift to state 32
-- On Tint shift to state 35
-- On TRUE shift to state 36
-- On PRINT shift to state 37
-- On MOINS shift to state 42
-- On LEFTPAR shift to state 43
-- On LEFTG shift to state 30
-- On IDENT shift to state 44
-- On FOIS shift to state 46
-- On FALSE shift to state 47
-- On EXCL shift to state 48
-- On ETMUT shift to state 49
-- On ET shift to state 50
-- On expr shift to state 71
-- On bloc shift to state 65

State 71:
expr -> expr . DBLEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . NOTEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INF expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INFEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUP expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUPEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . PLUS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOINS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr MOINS expr . [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . FOIS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . DIVISE expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOD expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . AND expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . OR expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . EGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT IDENT [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT LEN LEFTG RIGHTG [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . LEFTC expr RIGHTC [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On POINT shift to state 52
-- On MOD shift to state 63
-- On LEFTC shift to state 57
-- On FOIS shift to state 66
-- On DIVISE shift to state 68
-- On SUPEGAL reduce production expr -> expr MOINS expr 
-- On SUP reduce production expr -> expr MOINS expr 
-- On RIGHTPAR reduce production expr -> expr MOINS expr 
-- On RIGHTG reduce production expr -> expr MOINS expr 
-- On RIGHTC reduce production expr -> expr MOINS expr 
-- On PLUS reduce production expr -> expr MOINS expr 
-- On OR reduce production expr -> expr MOINS expr 
-- On NOTEGAL reduce production expr -> expr MOINS expr 
-- On MOINS reduce production expr -> expr MOINS expr 
-- On LEFTG reduce production expr -> expr MOINS expr 
-- On INFEGAL reduce production expr -> expr MOINS expr 
-- On INF reduce production expr -> expr MOINS expr 
-- On ENDLINE reduce production expr -> expr MOINS expr 
-- On EGAL reduce production expr -> expr MOINS expr 
-- On DBLEGAL reduce production expr -> expr MOINS expr 
-- On COMMA reduce production expr -> expr MOINS expr 
-- On AND reduce production expr -> expr MOINS expr 

State 72:
expr -> expr SUP . expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On VEC shift to state 32
-- On Tint shift to state 35
-- On TRUE shift to state 36
-- On PRINT shift to state 37
-- On MOINS shift to state 42
-- On LEFTPAR shift to state 43
-- On LEFTG shift to state 30
-- On IDENT shift to state 44
-- On FOIS shift to state 46
-- On FALSE shift to state 47
-- On EXCL shift to state 48
-- On ETMUT shift to state 49
-- On ET shift to state 50
-- On expr shift to state 73
-- On bloc shift to state 65

State 73:
expr -> expr . DBLEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . NOTEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INF expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INFEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUP expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr SUP expr . [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUPEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . PLUS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOINS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . FOIS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . DIVISE expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOD expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . AND expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . OR expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . EGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT IDENT [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT LEN LEFTG RIGHTG [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . LEFTC expr RIGHTC [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On POINT shift to state 52
-- On PLUS shift to state 61
-- On MOINS shift to state 70
-- On MOD shift to state 63
-- On LEFTC shift to state 57
-- On FOIS shift to state 66
-- On DIVISE shift to state 68
-- On RIGHTPAR reduce production expr -> expr SUP expr 
-- On RIGHTG reduce production expr -> expr SUP expr 
-- On RIGHTC reduce production expr -> expr SUP expr 
-- On OR reduce production expr -> expr SUP expr 
-- On LEFTG reduce production expr -> expr SUP expr 
-- On ENDLINE reduce production expr -> expr SUP expr 
-- On EGAL reduce production expr -> expr SUP expr 
-- On COMMA reduce production expr -> expr SUP expr 
-- On AND reduce production expr -> expr SUP expr 

State 74:
expr -> expr LEFTC expr RIGHTC . [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On SUPEGAL reduce production expr -> expr LEFTC expr RIGHTC 
-- On SUP reduce production expr -> expr LEFTC expr RIGHTC 
-- On RIGHTPAR reduce production expr -> expr LEFTC expr RIGHTC 
-- On RIGHTG reduce production expr -> expr LEFTC expr RIGHTC 
-- On RIGHTC reduce production expr -> expr LEFTC expr RIGHTC 
-- On POINT reduce production expr -> expr LEFTC expr RIGHTC 
-- On PLUS reduce production expr -> expr LEFTC expr RIGHTC 
-- On OR reduce production expr -> expr LEFTC expr RIGHTC 
-- On NOTEGAL reduce production expr -> expr LEFTC expr RIGHTC 
-- On MOINS reduce production expr -> expr LEFTC expr RIGHTC 
-- On MOD reduce production expr -> expr LEFTC expr RIGHTC 
-- On LEFTG reduce production expr -> expr LEFTC expr RIGHTC 
-- On LEFTC reduce production expr -> expr LEFTC expr RIGHTC 
-- On INFEGAL reduce production expr -> expr LEFTC expr RIGHTC 
-- On INF reduce production expr -> expr LEFTC expr RIGHTC 
-- On FOIS reduce production expr -> expr LEFTC expr RIGHTC 
-- On ENDLINE reduce production expr -> expr LEFTC expr RIGHTC 
-- On EGAL reduce production expr -> expr LEFTC expr RIGHTC 
-- On DIVISE reduce production expr -> expr LEFTC expr RIGHTC 
-- On DBLEGAL reduce production expr -> expr LEFTC expr RIGHTC 
-- On COMMA reduce production expr -> expr LEFTC expr RIGHTC 
-- On AND reduce production expr -> expr LEFTC expr RIGHTC 

State 75:
expr -> expr OR . expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On VEC shift to state 32
-- On Tint shift to state 35
-- On TRUE shift to state 36
-- On PRINT shift to state 37
-- On MOINS shift to state 42
-- On LEFTPAR shift to state 43
-- On LEFTG shift to state 30
-- On IDENT shift to state 44
-- On FOIS shift to state 46
-- On FALSE shift to state 47
-- On EXCL shift to state 48
-- On ETMUT shift to state 49
-- On ET shift to state 50
-- On expr shift to state 76
-- On bloc shift to state 65

State 76:
expr -> expr . DBLEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . NOTEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INF expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INFEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUP expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUPEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . PLUS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOINS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . FOIS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . DIVISE expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOD expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . AND expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . OR expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr OR expr . [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . EGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT IDENT [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT LEN LEFTG RIGHTG [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . LEFTC expr RIGHTC [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On SUPEGAL shift to state 59
-- On SUP shift to state 72
-- On POINT shift to state 52
-- On PLUS shift to state 61
-- On NOTEGAL shift to state 77
-- On MOINS shift to state 70
-- On MOD shift to state 63
-- On LEFTC shift to state 57
-- On INFEGAL shift to state 79
-- On INF shift to state 81
-- On FOIS shift to state 66
-- On DIVISE shift to state 68
-- On DBLEGAL shift to state 83
-- On AND shift to state 85
-- On RIGHTPAR reduce production expr -> expr OR expr 
-- On RIGHTG reduce production expr -> expr OR expr 
-- On RIGHTC reduce production expr -> expr OR expr 
-- On OR reduce production expr -> expr OR expr 
-- On LEFTG reduce production expr -> expr OR expr 
-- On ENDLINE reduce production expr -> expr OR expr 
-- On EGAL reduce production expr -> expr OR expr 
-- On COMMA reduce production expr -> expr OR expr 

State 77:
expr -> expr NOTEGAL . expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On VEC shift to state 32
-- On Tint shift to state 35
-- On TRUE shift to state 36
-- On PRINT shift to state 37
-- On MOINS shift to state 42
-- On LEFTPAR shift to state 43
-- On LEFTG shift to state 30
-- On IDENT shift to state 44
-- On FOIS shift to state 46
-- On FALSE shift to state 47
-- On EXCL shift to state 48
-- On ETMUT shift to state 49
-- On ET shift to state 50
-- On expr shift to state 78
-- On bloc shift to state 65

State 78:
expr -> expr . DBLEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . NOTEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr NOTEGAL expr . [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INF expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INFEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUP expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUPEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . PLUS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOINS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . FOIS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . DIVISE expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOD expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . AND expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . OR expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . EGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT IDENT [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT LEN LEFTG RIGHTG [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . LEFTC expr RIGHTC [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On POINT shift to state 52
-- On PLUS shift to state 61
-- On MOINS shift to state 70
-- On MOD shift to state 63
-- On LEFTC shift to state 57
-- On FOIS shift to state 66
-- On DIVISE shift to state 68
-- On RIGHTPAR reduce production expr -> expr NOTEGAL expr 
-- On RIGHTG reduce production expr -> expr NOTEGAL expr 
-- On RIGHTC reduce production expr -> expr NOTEGAL expr 
-- On OR reduce production expr -> expr NOTEGAL expr 
-- On LEFTG reduce production expr -> expr NOTEGAL expr 
-- On ENDLINE reduce production expr -> expr NOTEGAL expr 
-- On EGAL reduce production expr -> expr NOTEGAL expr 
-- On COMMA reduce production expr -> expr NOTEGAL expr 
-- On AND reduce production expr -> expr NOTEGAL expr 

State 79:
expr -> expr INFEGAL . expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On VEC shift to state 32
-- On Tint shift to state 35
-- On TRUE shift to state 36
-- On PRINT shift to state 37
-- On MOINS shift to state 42
-- On LEFTPAR shift to state 43
-- On LEFTG shift to state 30
-- On IDENT shift to state 44
-- On FOIS shift to state 46
-- On FALSE shift to state 47
-- On EXCL shift to state 48
-- On ETMUT shift to state 49
-- On ET shift to state 50
-- On expr shift to state 80
-- On bloc shift to state 65

State 80:
expr -> expr . DBLEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . NOTEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INF expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INFEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr INFEGAL expr . [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUP expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUPEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . PLUS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOINS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . FOIS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . DIVISE expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOD expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . AND expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . OR expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . EGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT IDENT [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT LEN LEFTG RIGHTG [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . LEFTC expr RIGHTC [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On POINT shift to state 52
-- On PLUS shift to state 61
-- On MOINS shift to state 70
-- On MOD shift to state 63
-- On LEFTC shift to state 57
-- On FOIS shift to state 66
-- On DIVISE shift to state 68
-- On RIGHTPAR reduce production expr -> expr INFEGAL expr 
-- On RIGHTG reduce production expr -> expr INFEGAL expr 
-- On RIGHTC reduce production expr -> expr INFEGAL expr 
-- On OR reduce production expr -> expr INFEGAL expr 
-- On LEFTG reduce production expr -> expr INFEGAL expr 
-- On ENDLINE reduce production expr -> expr INFEGAL expr 
-- On EGAL reduce production expr -> expr INFEGAL expr 
-- On COMMA reduce production expr -> expr INFEGAL expr 
-- On AND reduce production expr -> expr INFEGAL expr 

State 81:
expr -> expr INF . expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On VEC shift to state 32
-- On Tint shift to state 35
-- On TRUE shift to state 36
-- On PRINT shift to state 37
-- On MOINS shift to state 42
-- On LEFTPAR shift to state 43
-- On LEFTG shift to state 30
-- On IDENT shift to state 44
-- On FOIS shift to state 46
-- On FALSE shift to state 47
-- On EXCL shift to state 48
-- On ETMUT shift to state 49
-- On ET shift to state 50
-- On expr shift to state 82
-- On bloc shift to state 65

State 82:
expr -> expr . DBLEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . NOTEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INF expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr INF expr . [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INFEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUP expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUPEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . PLUS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOINS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . FOIS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . DIVISE expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOD expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . AND expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . OR expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . EGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT IDENT [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT LEN LEFTG RIGHTG [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . LEFTC expr RIGHTC [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On POINT shift to state 52
-- On PLUS shift to state 61
-- On MOINS shift to state 70
-- On MOD shift to state 63
-- On LEFTC shift to state 57
-- On FOIS shift to state 66
-- On DIVISE shift to state 68
-- On RIGHTPAR reduce production expr -> expr INF expr 
-- On RIGHTG reduce production expr -> expr INF expr 
-- On RIGHTC reduce production expr -> expr INF expr 
-- On OR reduce production expr -> expr INF expr 
-- On LEFTG reduce production expr -> expr INF expr 
-- On ENDLINE reduce production expr -> expr INF expr 
-- On EGAL reduce production expr -> expr INF expr 
-- On COMMA reduce production expr -> expr INF expr 
-- On AND reduce production expr -> expr INF expr 

State 83:
expr -> expr DBLEGAL . expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On VEC shift to state 32
-- On Tint shift to state 35
-- On TRUE shift to state 36
-- On PRINT shift to state 37
-- On MOINS shift to state 42
-- On LEFTPAR shift to state 43
-- On LEFTG shift to state 30
-- On IDENT shift to state 44
-- On FOIS shift to state 46
-- On FALSE shift to state 47
-- On EXCL shift to state 48
-- On ETMUT shift to state 49
-- On ET shift to state 50
-- On expr shift to state 84
-- On bloc shift to state 65

State 84:
expr -> expr . DBLEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr DBLEGAL expr . [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . NOTEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INF expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INFEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUP expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUPEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . PLUS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOINS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . FOIS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . DIVISE expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOD expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . AND expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . OR expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . EGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT IDENT [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT LEN LEFTG RIGHTG [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . LEFTC expr RIGHTC [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On POINT shift to state 52
-- On PLUS shift to state 61
-- On MOINS shift to state 70
-- On MOD shift to state 63
-- On LEFTC shift to state 57
-- On FOIS shift to state 66
-- On DIVISE shift to state 68
-- On RIGHTPAR reduce production expr -> expr DBLEGAL expr 
-- On RIGHTG reduce production expr -> expr DBLEGAL expr 
-- On RIGHTC reduce production expr -> expr DBLEGAL expr 
-- On OR reduce production expr -> expr DBLEGAL expr 
-- On LEFTG reduce production expr -> expr DBLEGAL expr 
-- On ENDLINE reduce production expr -> expr DBLEGAL expr 
-- On EGAL reduce production expr -> expr DBLEGAL expr 
-- On COMMA reduce production expr -> expr DBLEGAL expr 
-- On AND reduce production expr -> expr DBLEGAL expr 

State 85:
expr -> expr AND . expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On VEC shift to state 32
-- On Tint shift to state 35
-- On TRUE shift to state 36
-- On PRINT shift to state 37
-- On MOINS shift to state 42
-- On LEFTPAR shift to state 43
-- On LEFTG shift to state 30
-- On IDENT shift to state 44
-- On FOIS shift to state 46
-- On FALSE shift to state 47
-- On EXCL shift to state 48
-- On ETMUT shift to state 49
-- On ET shift to state 50
-- On expr shift to state 86
-- On bloc shift to state 65

State 86:
expr -> expr . DBLEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . NOTEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INF expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INFEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUP expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUPEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . PLUS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOINS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . FOIS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . DIVISE expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOD expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . AND expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr AND expr . [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . OR expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . EGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT IDENT [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT LEN LEFTG RIGHTG [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . LEFTC expr RIGHTC [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On SUPEGAL shift to state 59
-- On SUP shift to state 72
-- On POINT shift to state 52
-- On PLUS shift to state 61
-- On NOTEGAL shift to state 77
-- On MOINS shift to state 70
-- On MOD shift to state 63
-- On LEFTC shift to state 57
-- On INFEGAL shift to state 79
-- On INF shift to state 81
-- On FOIS shift to state 66
-- On DIVISE shift to state 68
-- On DBLEGAL shift to state 83
-- On RIGHTPAR reduce production expr -> expr AND expr 
-- On RIGHTG reduce production expr -> expr AND expr 
-- On RIGHTC reduce production expr -> expr AND expr 
-- On OR reduce production expr -> expr AND expr 
-- On LEFTG reduce production expr -> expr AND expr 
-- On ENDLINE reduce production expr -> expr AND expr 
-- On EGAL reduce production expr -> expr AND expr 
-- On COMMA reduce production expr -> expr AND expr 
-- On AND reduce production expr -> expr AND expr 

State 87:
expr -> expr EGAL . expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On VEC shift to state 32
-- On Tint shift to state 35
-- On TRUE shift to state 36
-- On PRINT shift to state 37
-- On MOINS shift to state 42
-- On LEFTPAR shift to state 43
-- On LEFTG shift to state 30
-- On IDENT shift to state 44
-- On FOIS shift to state 46
-- On FALSE shift to state 47
-- On EXCL shift to state 48
-- On ETMUT shift to state 49
-- On ET shift to state 50
-- On expr shift to state 88
-- On bloc shift to state 65

State 88:
expr -> expr . DBLEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . NOTEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INF expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INFEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUP expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUPEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . PLUS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOINS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . FOIS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . DIVISE expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOD expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . AND expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . OR expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . EGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr EGAL expr . [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT IDENT [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT LEN LEFTG RIGHTG [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . LEFTC expr RIGHTC [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On SUPEGAL shift to state 59
-- On SUP shift to state 72
-- On POINT shift to state 52
-- On PLUS shift to state 61
-- On OR shift to state 75
-- On NOTEGAL shift to state 77
-- On MOINS shift to state 70
-- On MOD shift to state 63
-- On LEFTC shift to state 57
-- On INFEGAL shift to state 79
-- On INF shift to state 81
-- On FOIS shift to state 66
-- On EGAL shift to state 87
-- On DIVISE shift to state 68
-- On DBLEGAL shift to state 83
-- On AND shift to state 85
-- On RIGHTPAR reduce production expr -> expr EGAL expr 
-- On RIGHTG reduce production expr -> expr EGAL expr 
-- On RIGHTC reduce production expr -> expr EGAL expr 
-- On LEFTG reduce production expr -> expr EGAL expr 
-- On ENDLINE reduce production expr -> expr EGAL expr 
-- On COMMA reduce production expr -> expr EGAL expr 

State 89:
expr -> expr . DBLEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . NOTEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INF expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INFEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUP expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUPEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . PLUS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOINS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . FOIS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . DIVISE expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOD expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . AND expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . OR expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . EGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> ETMUT expr . [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT IDENT [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT LEN LEFTG RIGHTG [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . LEFTC expr RIGHTC [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On POINT shift to state 52
-- On LEFTC shift to state 57
-- On SUPEGAL reduce production expr -> ETMUT expr 
-- On SUP reduce production expr -> ETMUT expr 
-- On RIGHTPAR reduce production expr -> ETMUT expr 
-- On RIGHTG reduce production expr -> ETMUT expr 
-- On RIGHTC reduce production expr -> ETMUT expr 
-- On PLUS reduce production expr -> ETMUT expr 
-- On OR reduce production expr -> ETMUT expr 
-- On NOTEGAL reduce production expr -> ETMUT expr 
-- On MOINS reduce production expr -> ETMUT expr 
-- On MOD reduce production expr -> ETMUT expr 
-- On LEFTG reduce production expr -> ETMUT expr 
-- On INFEGAL reduce production expr -> ETMUT expr 
-- On INF reduce production expr -> ETMUT expr 
-- On FOIS reduce production expr -> ETMUT expr 
-- On ENDLINE reduce production expr -> ETMUT expr 
-- On EGAL reduce production expr -> ETMUT expr 
-- On DIVISE reduce production expr -> ETMUT expr 
-- On DBLEGAL reduce production expr -> ETMUT expr 
-- On COMMA reduce production expr -> ETMUT expr 
-- On AND reduce production expr -> ETMUT expr 

State 90:
expr -> expr . DBLEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . NOTEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INF expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INFEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUP expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUPEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . PLUS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOINS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . FOIS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . DIVISE expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOD expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . AND expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . OR expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . EGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> EXCL expr . [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT IDENT [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT LEN LEFTG RIGHTG [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . LEFTC expr RIGHTC [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On POINT shift to state 52
-- On LEFTC shift to state 57
-- On SUPEGAL reduce production expr -> EXCL expr 
-- On SUP reduce production expr -> EXCL expr 
-- On RIGHTPAR reduce production expr -> EXCL expr 
-- On RIGHTG reduce production expr -> EXCL expr 
-- On RIGHTC reduce production expr -> EXCL expr 
-- On PLUS reduce production expr -> EXCL expr 
-- On OR reduce production expr -> EXCL expr 
-- On NOTEGAL reduce production expr -> EXCL expr 
-- On MOINS reduce production expr -> EXCL expr 
-- On MOD reduce production expr -> EXCL expr 
-- On LEFTG reduce production expr -> EXCL expr 
-- On INFEGAL reduce production expr -> EXCL expr 
-- On INF reduce production expr -> EXCL expr 
-- On FOIS reduce production expr -> EXCL expr 
-- On ENDLINE reduce production expr -> EXCL expr 
-- On EGAL reduce production expr -> EXCL expr 
-- On DIVISE reduce production expr -> EXCL expr 
-- On DBLEGAL reduce production expr -> EXCL expr 
-- On COMMA reduce production expr -> EXCL expr 
-- On AND reduce production expr -> EXCL expr 

State 91:
expr -> expr . DBLEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . NOTEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INF expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INFEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUP expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUPEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . PLUS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOINS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . FOIS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . DIVISE expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOD expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . AND expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . OR expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . EGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> FOIS expr . [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT IDENT [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT LEN LEFTG RIGHTG [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . LEFTC expr RIGHTC [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On POINT shift to state 52
-- On LEFTC shift to state 57
-- On SUPEGAL reduce production expr -> FOIS expr 
-- On SUP reduce production expr -> FOIS expr 
-- On RIGHTPAR reduce production expr -> FOIS expr 
-- On RIGHTG reduce production expr -> FOIS expr 
-- On RIGHTC reduce production expr -> FOIS expr 
-- On PLUS reduce production expr -> FOIS expr 
-- On OR reduce production expr -> FOIS expr 
-- On NOTEGAL reduce production expr -> FOIS expr 
-- On MOINS reduce production expr -> FOIS expr 
-- On MOD reduce production expr -> FOIS expr 
-- On LEFTG reduce production expr -> FOIS expr 
-- On INFEGAL reduce production expr -> FOIS expr 
-- On INF reduce production expr -> FOIS expr 
-- On FOIS reduce production expr -> FOIS expr 
-- On ENDLINE reduce production expr -> FOIS expr 
-- On EGAL reduce production expr -> FOIS expr 
-- On DIVISE reduce production expr -> FOIS expr 
-- On DBLEGAL reduce production expr -> FOIS expr 
-- On COMMA reduce production expr -> FOIS expr 
-- On AND reduce production expr -> FOIS expr 

State 92:
loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) . [ RIGHTPAR RIGHTC ]
-- On RIGHTPAR reduce production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) 
-- On RIGHTC reduce production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) 

State 93:
expr -> IDENT LEFTPAR loption(separated_nonempty_list(COMMA,expr)) . RIGHTPAR [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On RIGHTPAR shift to state 94

State 94:
expr -> IDENT LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR . [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On SUPEGAL reduce production expr -> IDENT LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On SUP reduce production expr -> IDENT LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On RIGHTPAR reduce production expr -> IDENT LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On RIGHTG reduce production expr -> IDENT LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On RIGHTC reduce production expr -> IDENT LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On POINT reduce production expr -> IDENT LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On PLUS reduce production expr -> IDENT LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On OR reduce production expr -> IDENT LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On NOTEGAL reduce production expr -> IDENT LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On MOINS reduce production expr -> IDENT LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On MOD reduce production expr -> IDENT LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On LEFTG reduce production expr -> IDENT LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On LEFTC reduce production expr -> IDENT LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On INFEGAL reduce production expr -> IDENT LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On INF reduce production expr -> IDENT LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On FOIS reduce production expr -> IDENT LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On ENDLINE reduce production expr -> IDENT LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On EGAL reduce production expr -> IDENT LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On DIVISE reduce production expr -> IDENT LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On DBLEGAL reduce production expr -> IDENT LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On COMMA reduce production expr -> IDENT LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 
-- On AND reduce production expr -> IDENT LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR 

State 95:
expr -> expr . DBLEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . NOTEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INF expr [ SUPEGAL SUP RIGHTPAR RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INFEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUP expr [ SUPEGAL SUP RIGHTPAR RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUPEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . PLUS expr [ SUPEGAL SUP RIGHTPAR RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOINS expr [ SUPEGAL SUP RIGHTPAR RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . FOIS expr [ SUPEGAL SUP RIGHTPAR RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . DIVISE expr [ SUPEGAL SUP RIGHTPAR RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOD expr [ SUPEGAL SUP RIGHTPAR RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . AND expr [ SUPEGAL SUP RIGHTPAR RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . OR expr [ SUPEGAL SUP RIGHTPAR RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . EGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT IDENT [ SUPEGAL SUP RIGHTPAR RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT LEN LEFTG RIGHTG [ SUPEGAL SUP RIGHTPAR RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . LEFTC expr RIGHTC [ SUPEGAL SUP RIGHTPAR RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
separated_nonempty_list(COMMA,expr) -> expr . [ RIGHTPAR RIGHTC ]
separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RIGHTPAR RIGHTC ]
-- On SUPEGAL shift to state 59
-- On SUP shift to state 72
-- On POINT shift to state 52
-- On PLUS shift to state 61
-- On OR shift to state 75
-- On NOTEGAL shift to state 77
-- On MOINS shift to state 70
-- On MOD shift to state 63
-- On LEFTC shift to state 57
-- On INFEGAL shift to state 79
-- On INF shift to state 81
-- On FOIS shift to state 66
-- On EGAL shift to state 87
-- On DIVISE shift to state 68
-- On DBLEGAL shift to state 83
-- On COMMA shift to state 96
-- On AND shift to state 85
-- On RIGHTPAR reduce production separated_nonempty_list(COMMA,expr) -> expr 
-- On RIGHTC reduce production separated_nonempty_list(COMMA,expr) -> expr 

State 96:
separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RIGHTPAR RIGHTC ]
-- On VEC shift to state 32
-- On Tint shift to state 35
-- On TRUE shift to state 36
-- On PRINT shift to state 37
-- On MOINS shift to state 42
-- On LEFTPAR shift to state 43
-- On LEFTG shift to state 30
-- On IDENT shift to state 44
-- On FOIS shift to state 46
-- On FALSE shift to state 47
-- On EXCL shift to state 48
-- On ETMUT shift to state 49
-- On ET shift to state 50
-- On separated_nonempty_list(COMMA,expr) shift to state 97
-- On expr shift to state 95
-- On bloc shift to state 65

State 97:
separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr) . [ RIGHTPAR RIGHTC ]
-- On RIGHTPAR reduce production separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr) 
-- On RIGHTC reduce production separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr) 

State 98:
expr -> expr . DBLEGAL expr [ SUPEGAL SUP RIGHTPAR POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . NOTEGAL expr [ SUPEGAL SUP RIGHTPAR POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . INF expr [ SUPEGAL SUP RIGHTPAR POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . INFEGAL expr [ SUPEGAL SUP RIGHTPAR POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . SUP expr [ SUPEGAL SUP RIGHTPAR POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . SUPEGAL expr [ SUPEGAL SUP RIGHTPAR POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . PLUS expr [ SUPEGAL SUP RIGHTPAR POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . MOINS expr [ SUPEGAL SUP RIGHTPAR POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . FOIS expr [ SUPEGAL SUP RIGHTPAR POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . DIVISE expr [ SUPEGAL SUP RIGHTPAR POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . MOD expr [ SUPEGAL SUP RIGHTPAR POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . AND expr [ SUPEGAL SUP RIGHTPAR POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . OR expr [ SUPEGAL SUP RIGHTPAR POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . EGAL expr [ SUPEGAL SUP RIGHTPAR POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . POINT IDENT [ SUPEGAL SUP RIGHTPAR POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . POINT LEN LEFTG RIGHTG [ SUPEGAL SUP RIGHTPAR POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . LEFTC expr RIGHTC [ SUPEGAL SUP RIGHTPAR POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> LEFTPAR expr . RIGHTPAR [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On SUPEGAL shift to state 59
-- On SUP shift to state 72
-- On RIGHTPAR shift to state 99
-- On POINT shift to state 52
-- On PLUS shift to state 61
-- On OR shift to state 75
-- On NOTEGAL shift to state 77
-- On MOINS shift to state 70
-- On MOD shift to state 63
-- On LEFTC shift to state 57
-- On INFEGAL shift to state 79
-- On INF shift to state 81
-- On FOIS shift to state 66
-- On EGAL shift to state 87
-- On DIVISE shift to state 68
-- On DBLEGAL shift to state 83
-- On AND shift to state 85

State 99:
expr -> LEFTPAR expr RIGHTPAR . [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On SUPEGAL reduce production expr -> LEFTPAR expr RIGHTPAR 
-- On SUP reduce production expr -> LEFTPAR expr RIGHTPAR 
-- On RIGHTPAR reduce production expr -> LEFTPAR expr RIGHTPAR 
-- On RIGHTG reduce production expr -> LEFTPAR expr RIGHTPAR 
-- On RIGHTC reduce production expr -> LEFTPAR expr RIGHTPAR 
-- On POINT reduce production expr -> LEFTPAR expr RIGHTPAR 
-- On PLUS reduce production expr -> LEFTPAR expr RIGHTPAR 
-- On OR reduce production expr -> LEFTPAR expr RIGHTPAR 
-- On NOTEGAL reduce production expr -> LEFTPAR expr RIGHTPAR 
-- On MOINS reduce production expr -> LEFTPAR expr RIGHTPAR 
-- On MOD reduce production expr -> LEFTPAR expr RIGHTPAR 
-- On LEFTG reduce production expr -> LEFTPAR expr RIGHTPAR 
-- On LEFTC reduce production expr -> LEFTPAR expr RIGHTPAR 
-- On INFEGAL reduce production expr -> LEFTPAR expr RIGHTPAR 
-- On INF reduce production expr -> LEFTPAR expr RIGHTPAR 
-- On FOIS reduce production expr -> LEFTPAR expr RIGHTPAR 
-- On ENDLINE reduce production expr -> LEFTPAR expr RIGHTPAR 
-- On EGAL reduce production expr -> LEFTPAR expr RIGHTPAR 
-- On DIVISE reduce production expr -> LEFTPAR expr RIGHTPAR 
-- On DBLEGAL reduce production expr -> LEFTPAR expr RIGHTPAR 
-- On COMMA reduce production expr -> LEFTPAR expr RIGHTPAR 
-- On AND reduce production expr -> LEFTPAR expr RIGHTPAR 

State 100:
expr -> expr . DBLEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . NOTEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INF expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INFEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUP expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUPEGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . PLUS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOINS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . FOIS expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . DIVISE expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOD expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . AND expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . OR expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . EGAL expr [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> MOINS expr . [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT IDENT [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT LEN LEFTG RIGHTG [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . LEFTC expr RIGHTC [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On POINT shift to state 52
-- On LEFTC shift to state 57
-- On SUPEGAL reduce production expr -> MOINS expr 
-- On SUP reduce production expr -> MOINS expr 
-- On RIGHTPAR reduce production expr -> MOINS expr 
-- On RIGHTG reduce production expr -> MOINS expr 
-- On RIGHTC reduce production expr -> MOINS expr 
-- On PLUS reduce production expr -> MOINS expr 
-- On OR reduce production expr -> MOINS expr 
-- On NOTEGAL reduce production expr -> MOINS expr 
-- On MOINS reduce production expr -> MOINS expr 
-- On MOD reduce production expr -> MOINS expr 
-- On LEFTG reduce production expr -> MOINS expr 
-- On INFEGAL reduce production expr -> MOINS expr 
-- On INF reduce production expr -> MOINS expr 
-- On FOIS reduce production expr -> MOINS expr 
-- On ENDLINE reduce production expr -> MOINS expr 
-- On EGAL reduce production expr -> MOINS expr 
-- On DIVISE reduce production expr -> MOINS expr 
-- On DBLEGAL reduce production expr -> MOINS expr 
-- On COMMA reduce production expr -> MOINS expr 
-- On AND reduce production expr -> MOINS expr 

State 101:
expr -> VEC EXCL LEFTC loption(separated_nonempty_list(COMMA,expr)) . RIGHTC [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On RIGHTC shift to state 102

State 102:
expr -> VEC EXCL LEFTC loption(separated_nonempty_list(COMMA,expr)) RIGHTC . [ SUPEGAL SUP RIGHTPAR RIGHTG RIGHTC POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL COMMA AND ]
-- On SUPEGAL reduce production expr -> VEC EXCL LEFTC loption(separated_nonempty_list(COMMA,expr)) RIGHTC 
-- On SUP reduce production expr -> VEC EXCL LEFTC loption(separated_nonempty_list(COMMA,expr)) RIGHTC 
-- On RIGHTPAR reduce production expr -> VEC EXCL LEFTC loption(separated_nonempty_list(COMMA,expr)) RIGHTC 
-- On RIGHTG reduce production expr -> VEC EXCL LEFTC loption(separated_nonempty_list(COMMA,expr)) RIGHTC 
-- On RIGHTC reduce production expr -> VEC EXCL LEFTC loption(separated_nonempty_list(COMMA,expr)) RIGHTC 
-- On POINT reduce production expr -> VEC EXCL LEFTC loption(separated_nonempty_list(COMMA,expr)) RIGHTC 
-- On PLUS reduce production expr -> VEC EXCL LEFTC loption(separated_nonempty_list(COMMA,expr)) RIGHTC 
-- On OR reduce production expr -> VEC EXCL LEFTC loption(separated_nonempty_list(COMMA,expr)) RIGHTC 
-- On NOTEGAL reduce production expr -> VEC EXCL LEFTC loption(separated_nonempty_list(COMMA,expr)) RIGHTC 
-- On MOINS reduce production expr -> VEC EXCL LEFTC loption(separated_nonempty_list(COMMA,expr)) RIGHTC 
-- On MOD reduce production expr -> VEC EXCL LEFTC loption(separated_nonempty_list(COMMA,expr)) RIGHTC 
-- On LEFTG reduce production expr -> VEC EXCL LEFTC loption(separated_nonempty_list(COMMA,expr)) RIGHTC 
-- On LEFTC reduce production expr -> VEC EXCL LEFTC loption(separated_nonempty_list(COMMA,expr)) RIGHTC 
-- On INFEGAL reduce production expr -> VEC EXCL LEFTC loption(separated_nonempty_list(COMMA,expr)) RIGHTC 
-- On INF reduce production expr -> VEC EXCL LEFTC loption(separated_nonempty_list(COMMA,expr)) RIGHTC 
-- On FOIS reduce production expr -> VEC EXCL LEFTC loption(separated_nonempty_list(COMMA,expr)) RIGHTC 
-- On ENDLINE reduce production expr -> VEC EXCL LEFTC loption(separated_nonempty_list(COMMA,expr)) RIGHTC 
-- On EGAL reduce production expr -> VEC EXCL LEFTC loption(separated_nonempty_list(COMMA,expr)) RIGHTC 
-- On DIVISE reduce production expr -> VEC EXCL LEFTC loption(separated_nonempty_list(COMMA,expr)) RIGHTC 
-- On DBLEGAL reduce production expr -> VEC EXCL LEFTC loption(separated_nonempty_list(COMMA,expr)) RIGHTC 
-- On COMMA reduce production expr -> VEC EXCL LEFTC loption(separated_nonempty_list(COMMA,expr)) RIGHTC 
-- On AND reduce production expr -> VEC EXCL LEFTC loption(separated_nonempty_list(COMMA,expr)) RIGHTC 

State 103:
expr -> expr . DBLEGAL expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . NOTEGAL expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . INF expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . INFEGAL expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . SUP expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . SUPEGAL expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . PLUS expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . MOINS expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . FOIS expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . DIVISE expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . MOD expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . AND expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . OR expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . EGAL expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . POINT IDENT [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . POINT LEN LEFTG RIGHTG [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . LEFTC expr RIGHTC [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
instr -> WHILE expr . bloc [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
-- On SUPEGAL shift to state 59
-- On SUP shift to state 72
-- On POINT shift to state 52
-- On PLUS shift to state 61
-- On OR shift to state 75
-- On NOTEGAL shift to state 77
-- On MOINS shift to state 70
-- On MOD shift to state 63
-- On LEFTG shift to state 30
-- On LEFTC shift to state 57
-- On INFEGAL shift to state 79
-- On INF shift to state 81
-- On FOIS shift to state 66
-- On EGAL shift to state 87
-- On DIVISE shift to state 68
-- On DBLEGAL shift to state 83
-- On AND shift to state 85
-- On bloc shift to state 104

State 104:
instr -> WHILE expr bloc . [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
-- On WHILE reduce production instr -> WHILE expr bloc 
-- On VEC reduce production instr -> WHILE expr bloc 
-- On Tint reduce production instr -> WHILE expr bloc 
-- On TRUE reduce production instr -> WHILE expr bloc 
-- On RIGHTG reduce production instr -> WHILE expr bloc 
-- On RETURN reduce production instr -> WHILE expr bloc 
-- On PRINT reduce production instr -> WHILE expr bloc 
-- On MOINS reduce production instr -> WHILE expr bloc 
-- On LET reduce production instr -> WHILE expr bloc 
-- On LEFTPAR reduce production instr -> WHILE expr bloc 
-- On LEFTG reduce production instr -> WHILE expr bloc 
-- On IF reduce production instr -> WHILE expr bloc 
-- On IDENT reduce production instr -> WHILE expr bloc 
-- On FOIS reduce production instr -> WHILE expr bloc 
-- On FALSE reduce production instr -> WHILE expr bloc 
-- On EXCL reduce production instr -> WHILE expr bloc 
-- On ETMUT reduce production instr -> WHILE expr bloc 
-- On ET reduce production instr -> WHILE expr bloc 
-- On ENDLINE reduce production instr -> WHILE expr bloc 

State 105:
instr -> RETURN . ENDLINE [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
instr -> RETURN . expr ENDLINE [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
-- On VEC shift to state 32
-- On Tint shift to state 35
-- On TRUE shift to state 36
-- On PRINT shift to state 37
-- On MOINS shift to state 42
-- On LEFTPAR shift to state 43
-- On LEFTG shift to state 30
-- On IDENT shift to state 44
-- On FOIS shift to state 46
-- On FALSE shift to state 47
-- On EXCL shift to state 48
-- On ETMUT shift to state 49
-- On ET shift to state 50
-- On ENDLINE shift to state 106
-- On expr shift to state 107
-- On bloc shift to state 65

State 106:
instr -> RETURN ENDLINE . [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
-- On WHILE reduce production instr -> RETURN ENDLINE 
-- On VEC reduce production instr -> RETURN ENDLINE 
-- On Tint reduce production instr -> RETURN ENDLINE 
-- On TRUE reduce production instr -> RETURN ENDLINE 
-- On RIGHTG reduce production instr -> RETURN ENDLINE 
-- On RETURN reduce production instr -> RETURN ENDLINE 
-- On PRINT reduce production instr -> RETURN ENDLINE 
-- On MOINS reduce production instr -> RETURN ENDLINE 
-- On LET reduce production instr -> RETURN ENDLINE 
-- On LEFTPAR reduce production instr -> RETURN ENDLINE 
-- On LEFTG reduce production instr -> RETURN ENDLINE 
-- On IF reduce production instr -> RETURN ENDLINE 
-- On IDENT reduce production instr -> RETURN ENDLINE 
-- On FOIS reduce production instr -> RETURN ENDLINE 
-- On FALSE reduce production instr -> RETURN ENDLINE 
-- On EXCL reduce production instr -> RETURN ENDLINE 
-- On ETMUT reduce production instr -> RETURN ENDLINE 
-- On ET reduce production instr -> RETURN ENDLINE 
-- On ENDLINE reduce production instr -> RETURN ENDLINE 

State 107:
expr -> expr . DBLEGAL expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . NOTEGAL expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . INF expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . INFEGAL expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . SUP expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . SUPEGAL expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . PLUS expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . MOINS expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . FOIS expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . DIVISE expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . MOD expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . AND expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . OR expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . EGAL expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . POINT IDENT [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . POINT LEN LEFTG RIGHTG [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . LEFTC expr RIGHTC [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
instr -> RETURN expr . ENDLINE [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
-- On SUPEGAL shift to state 59
-- On SUP shift to state 72
-- On POINT shift to state 52
-- On PLUS shift to state 61
-- On OR shift to state 75
-- On NOTEGAL shift to state 77
-- On MOINS shift to state 70
-- On MOD shift to state 63
-- On LEFTC shift to state 57
-- On INFEGAL shift to state 79
-- On INF shift to state 81
-- On FOIS shift to state 66
-- On ENDLINE shift to state 108
-- On EGAL shift to state 87
-- On DIVISE shift to state 68
-- On DBLEGAL shift to state 83
-- On AND shift to state 85

State 108:
instr -> RETURN expr ENDLINE . [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
-- On WHILE reduce production instr -> RETURN expr ENDLINE 
-- On VEC reduce production instr -> RETURN expr ENDLINE 
-- On Tint reduce production instr -> RETURN expr ENDLINE 
-- On TRUE reduce production instr -> RETURN expr ENDLINE 
-- On RIGHTG reduce production instr -> RETURN expr ENDLINE 
-- On RETURN reduce production instr -> RETURN expr ENDLINE 
-- On PRINT reduce production instr -> RETURN expr ENDLINE 
-- On MOINS reduce production instr -> RETURN expr ENDLINE 
-- On LET reduce production instr -> RETURN expr ENDLINE 
-- On LEFTPAR reduce production instr -> RETURN expr ENDLINE 
-- On LEFTG reduce production instr -> RETURN expr ENDLINE 
-- On IF reduce production instr -> RETURN expr ENDLINE 
-- On IDENT reduce production instr -> RETURN expr ENDLINE 
-- On FOIS reduce production instr -> RETURN expr ENDLINE 
-- On FALSE reduce production instr -> RETURN expr ENDLINE 
-- On EXCL reduce production instr -> RETURN expr ENDLINE 
-- On ETMUT reduce production instr -> RETURN expr ENDLINE 
-- On ET reduce production instr -> RETURN expr ENDLINE 
-- On ENDLINE reduce production instr -> RETURN expr ENDLINE 

State 109:
instr -> LET . boption(MUT) IDENT EGAL expr ENDLINE [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
instr -> LET . boption(MUT) IDENT EGAL IDENT LEFTG loption(separated_nonempty_list(COMMA,sous_instr)) RIGHTG ENDLINE [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
-- On MUT shift to state 24
-- On boption(MUT) shift to state 110
-- On IDENT reduce production boption(MUT) -> 

State 110:
instr -> LET boption(MUT) . IDENT EGAL expr ENDLINE [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
instr -> LET boption(MUT) . IDENT EGAL IDENT LEFTG loption(separated_nonempty_list(COMMA,sous_instr)) RIGHTG ENDLINE [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
-- On IDENT shift to state 111

State 111:
instr -> LET boption(MUT) IDENT . EGAL expr ENDLINE [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
instr -> LET boption(MUT) IDENT . EGAL IDENT LEFTG loption(separated_nonempty_list(COMMA,sous_instr)) RIGHTG ENDLINE [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
-- On EGAL shift to state 112

State 112:
instr -> LET boption(MUT) IDENT EGAL . expr ENDLINE [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
instr -> LET boption(MUT) IDENT EGAL . IDENT LEFTG loption(separated_nonempty_list(COMMA,sous_instr)) RIGHTG ENDLINE [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
-- On VEC shift to state 32
-- On Tint shift to state 35
-- On TRUE shift to state 36
-- On PRINT shift to state 37
-- On MOINS shift to state 42
-- On LEFTPAR shift to state 43
-- On LEFTG shift to state 30
-- On IDENT shift to state 113
-- On FOIS shift to state 46
-- On FALSE shift to state 47
-- On EXCL shift to state 48
-- On ETMUT shift to state 49
-- On ET shift to state 50
-- On expr shift to state 125
-- On bloc shift to state 65

State 113:
expr -> IDENT . [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> IDENT . LEFTPAR loption(separated_nonempty_list(COMMA,expr)) RIGHTPAR [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
instr -> LET boption(MUT) IDENT EGAL IDENT . LEFTG loption(separated_nonempty_list(COMMA,sous_instr)) RIGHTG ENDLINE [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
-- On LEFTPAR shift to state 45
-- On LEFTG shift to state 114
-- On SUPEGAL reduce production expr -> IDENT 
-- On SUP reduce production expr -> IDENT 
-- On POINT reduce production expr -> IDENT 
-- On PLUS reduce production expr -> IDENT 
-- On OR reduce production expr -> IDENT 
-- On NOTEGAL reduce production expr -> IDENT 
-- On MOINS reduce production expr -> IDENT 
-- On MOD reduce production expr -> IDENT 
-- On LEFTC reduce production expr -> IDENT 
-- On INFEGAL reduce production expr -> IDENT 
-- On INF reduce production expr -> IDENT 
-- On FOIS reduce production expr -> IDENT 
-- On ENDLINE reduce production expr -> IDENT 
-- On EGAL reduce production expr -> IDENT 
-- On DIVISE reduce production expr -> IDENT 
-- On DBLEGAL reduce production expr -> IDENT 
-- On AND reduce production expr -> IDENT 

State 114:
instr -> LET boption(MUT) IDENT EGAL IDENT LEFTG . loption(separated_nonempty_list(COMMA,sous_instr)) RIGHTG ENDLINE [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
-- On IDENT shift to state 115
-- On sous_instr shift to state 118
-- On separated_nonempty_list(COMMA,sous_instr) shift to state 121
-- On loption(separated_nonempty_list(COMMA,sous_instr)) shift to state 122
-- On RIGHTG reduce production loption(separated_nonempty_list(COMMA,sous_instr)) -> 

State 115:
sous_instr -> IDENT . TO expr [ RIGHTG COMMA ]
-- On TO shift to state 116

State 116:
sous_instr -> IDENT TO . expr [ RIGHTG COMMA ]
-- On VEC shift to state 32
-- On Tint shift to state 35
-- On TRUE shift to state 36
-- On PRINT shift to state 37
-- On MOINS shift to state 42
-- On LEFTPAR shift to state 43
-- On LEFTG shift to state 30
-- On IDENT shift to state 44
-- On FOIS shift to state 46
-- On FALSE shift to state 47
-- On EXCL shift to state 48
-- On ETMUT shift to state 49
-- On ET shift to state 50
-- On expr shift to state 117
-- On bloc shift to state 65

State 117:
expr -> expr . DBLEGAL expr [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . NOTEGAL expr [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INF expr [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . INFEGAL expr [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUP expr [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . SUPEGAL expr [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . PLUS expr [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOINS expr [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . FOIS expr [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . DIVISE expr [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . MOD expr [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . AND expr [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . OR expr [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . EGAL expr [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT IDENT [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . POINT LEN LEFTG RIGHTG [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
expr -> expr . LEFTC expr RIGHTC [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL COMMA AND ]
sous_instr -> IDENT TO expr . [ RIGHTG COMMA ]
-- On SUPEGAL shift to state 59
-- On SUP shift to state 72
-- On POINT shift to state 52
-- On PLUS shift to state 61
-- On OR shift to state 75
-- On NOTEGAL shift to state 77
-- On MOINS shift to state 70
-- On MOD shift to state 63
-- On LEFTC shift to state 57
-- On INFEGAL shift to state 79
-- On INF shift to state 81
-- On FOIS shift to state 66
-- On EGAL shift to state 87
-- On DIVISE shift to state 68
-- On DBLEGAL shift to state 83
-- On AND shift to state 85
-- On RIGHTG reduce production sous_instr -> IDENT TO expr 
-- On COMMA reduce production sous_instr -> IDENT TO expr 

State 118:
separated_nonempty_list(COMMA,sous_instr) -> sous_instr . [ RIGHTG ]
separated_nonempty_list(COMMA,sous_instr) -> sous_instr . COMMA separated_nonempty_list(COMMA,sous_instr) [ RIGHTG ]
-- On COMMA shift to state 119
-- On RIGHTG reduce production separated_nonempty_list(COMMA,sous_instr) -> sous_instr 

State 119:
separated_nonempty_list(COMMA,sous_instr) -> sous_instr COMMA . separated_nonempty_list(COMMA,sous_instr) [ RIGHTG ]
-- On IDENT shift to state 115
-- On sous_instr shift to state 118
-- On separated_nonempty_list(COMMA,sous_instr) shift to state 120

State 120:
separated_nonempty_list(COMMA,sous_instr) -> sous_instr COMMA separated_nonempty_list(COMMA,sous_instr) . [ RIGHTG ]
-- On RIGHTG reduce production separated_nonempty_list(COMMA,sous_instr) -> sous_instr COMMA separated_nonempty_list(COMMA,sous_instr) 

State 121:
loption(separated_nonempty_list(COMMA,sous_instr)) -> separated_nonempty_list(COMMA,sous_instr) . [ RIGHTG ]
-- On RIGHTG reduce production loption(separated_nonempty_list(COMMA,sous_instr)) -> separated_nonempty_list(COMMA,sous_instr) 

State 122:
instr -> LET boption(MUT) IDENT EGAL IDENT LEFTG loption(separated_nonempty_list(COMMA,sous_instr)) . RIGHTG ENDLINE [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
-- On RIGHTG shift to state 123

State 123:
instr -> LET boption(MUT) IDENT EGAL IDENT LEFTG loption(separated_nonempty_list(COMMA,sous_instr)) RIGHTG . ENDLINE [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
-- On ENDLINE shift to state 124

State 124:
instr -> LET boption(MUT) IDENT EGAL IDENT LEFTG loption(separated_nonempty_list(COMMA,sous_instr)) RIGHTG ENDLINE . [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
-- On WHILE reduce production instr -> LET boption(MUT) IDENT EGAL IDENT LEFTG loption(separated_nonempty_list(COMMA,sous_instr)) RIGHTG ENDLINE 
-- On VEC reduce production instr -> LET boption(MUT) IDENT EGAL IDENT LEFTG loption(separated_nonempty_list(COMMA,sous_instr)) RIGHTG ENDLINE 
-- On Tint reduce production instr -> LET boption(MUT) IDENT EGAL IDENT LEFTG loption(separated_nonempty_list(COMMA,sous_instr)) RIGHTG ENDLINE 
-- On TRUE reduce production instr -> LET boption(MUT) IDENT EGAL IDENT LEFTG loption(separated_nonempty_list(COMMA,sous_instr)) RIGHTG ENDLINE 
-- On RIGHTG reduce production instr -> LET boption(MUT) IDENT EGAL IDENT LEFTG loption(separated_nonempty_list(COMMA,sous_instr)) RIGHTG ENDLINE 
-- On RETURN reduce production instr -> LET boption(MUT) IDENT EGAL IDENT LEFTG loption(separated_nonempty_list(COMMA,sous_instr)) RIGHTG ENDLINE 
-- On PRINT reduce production instr -> LET boption(MUT) IDENT EGAL IDENT LEFTG loption(separated_nonempty_list(COMMA,sous_instr)) RIGHTG ENDLINE 
-- On MOINS reduce production instr -> LET boption(MUT) IDENT EGAL IDENT LEFTG loption(separated_nonempty_list(COMMA,sous_instr)) RIGHTG ENDLINE 
-- On LET reduce production instr -> LET boption(MUT) IDENT EGAL IDENT LEFTG loption(separated_nonempty_list(COMMA,sous_instr)) RIGHTG ENDLINE 
-- On LEFTPAR reduce production instr -> LET boption(MUT) IDENT EGAL IDENT LEFTG loption(separated_nonempty_list(COMMA,sous_instr)) RIGHTG ENDLINE 
-- On LEFTG reduce production instr -> LET boption(MUT) IDENT EGAL IDENT LEFTG loption(separated_nonempty_list(COMMA,sous_instr)) RIGHTG ENDLINE 
-- On IF reduce production instr -> LET boption(MUT) IDENT EGAL IDENT LEFTG loption(separated_nonempty_list(COMMA,sous_instr)) RIGHTG ENDLINE 
-- On IDENT reduce production instr -> LET boption(MUT) IDENT EGAL IDENT LEFTG loption(separated_nonempty_list(COMMA,sous_instr)) RIGHTG ENDLINE 
-- On FOIS reduce production instr -> LET boption(MUT) IDENT EGAL IDENT LEFTG loption(separated_nonempty_list(COMMA,sous_instr)) RIGHTG ENDLINE 
-- On FALSE reduce production instr -> LET boption(MUT) IDENT EGAL IDENT LEFTG loption(separated_nonempty_list(COMMA,sous_instr)) RIGHTG ENDLINE 
-- On EXCL reduce production instr -> LET boption(MUT) IDENT EGAL IDENT LEFTG loption(separated_nonempty_list(COMMA,sous_instr)) RIGHTG ENDLINE 
-- On ETMUT reduce production instr -> LET boption(MUT) IDENT EGAL IDENT LEFTG loption(separated_nonempty_list(COMMA,sous_instr)) RIGHTG ENDLINE 
-- On ET reduce production instr -> LET boption(MUT) IDENT EGAL IDENT LEFTG loption(separated_nonempty_list(COMMA,sous_instr)) RIGHTG ENDLINE 
-- On ENDLINE reduce production instr -> LET boption(MUT) IDENT EGAL IDENT LEFTG loption(separated_nonempty_list(COMMA,sous_instr)) RIGHTG ENDLINE 

State 125:
expr -> expr . DBLEGAL expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . NOTEGAL expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . INF expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . INFEGAL expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . SUP expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . SUPEGAL expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . PLUS expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . MOINS expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . FOIS expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . DIVISE expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . MOD expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . AND expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . OR expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . EGAL expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . POINT IDENT [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . POINT LEN LEFTG RIGHTG [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . LEFTC expr RIGHTC [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
instr -> LET boption(MUT) IDENT EGAL expr . ENDLINE [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
-- On SUPEGAL shift to state 59
-- On SUP shift to state 72
-- On POINT shift to state 52
-- On PLUS shift to state 61
-- On OR shift to state 75
-- On NOTEGAL shift to state 77
-- On MOINS shift to state 70
-- On MOD shift to state 63
-- On LEFTC shift to state 57
-- On INFEGAL shift to state 79
-- On INF shift to state 81
-- On FOIS shift to state 66
-- On ENDLINE shift to state 126
-- On EGAL shift to state 87
-- On DIVISE shift to state 68
-- On DBLEGAL shift to state 83
-- On AND shift to state 85

State 126:
instr -> LET boption(MUT) IDENT EGAL expr ENDLINE . [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
-- On WHILE reduce production instr -> LET boption(MUT) IDENT EGAL expr ENDLINE 
-- On VEC reduce production instr -> LET boption(MUT) IDENT EGAL expr ENDLINE 
-- On Tint reduce production instr -> LET boption(MUT) IDENT EGAL expr ENDLINE 
-- On TRUE reduce production instr -> LET boption(MUT) IDENT EGAL expr ENDLINE 
-- On RIGHTG reduce production instr -> LET boption(MUT) IDENT EGAL expr ENDLINE 
-- On RETURN reduce production instr -> LET boption(MUT) IDENT EGAL expr ENDLINE 
-- On PRINT reduce production instr -> LET boption(MUT) IDENT EGAL expr ENDLINE 
-- On MOINS reduce production instr -> LET boption(MUT) IDENT EGAL expr ENDLINE 
-- On LET reduce production instr -> LET boption(MUT) IDENT EGAL expr ENDLINE 
-- On LEFTPAR reduce production instr -> LET boption(MUT) IDENT EGAL expr ENDLINE 
-- On LEFTG reduce production instr -> LET boption(MUT) IDENT EGAL expr ENDLINE 
-- On IF reduce production instr -> LET boption(MUT) IDENT EGAL expr ENDLINE 
-- On IDENT reduce production instr -> LET boption(MUT) IDENT EGAL expr ENDLINE 
-- On FOIS reduce production instr -> LET boption(MUT) IDENT EGAL expr ENDLINE 
-- On FALSE reduce production instr -> LET boption(MUT) IDENT EGAL expr ENDLINE 
-- On EXCL reduce production instr -> LET boption(MUT) IDENT EGAL expr ENDLINE 
-- On ETMUT reduce production instr -> LET boption(MUT) IDENT EGAL expr ENDLINE 
-- On ET reduce production instr -> LET boption(MUT) IDENT EGAL expr ENDLINE 
-- On ENDLINE reduce production instr -> LET boption(MUT) IDENT EGAL expr ENDLINE 

State 127:
ifb -> IF . expr bloc [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
ifb -> IF . expr bloc ELSE bloc [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
ifb -> IF . expr bloc ELSE ifb [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
-- On VEC shift to state 32
-- On Tint shift to state 35
-- On TRUE shift to state 36
-- On PRINT shift to state 37
-- On MOINS shift to state 42
-- On LEFTPAR shift to state 43
-- On LEFTG shift to state 30
-- On IDENT shift to state 44
-- On FOIS shift to state 46
-- On FALSE shift to state 47
-- On EXCL shift to state 48
-- On ETMUT shift to state 49
-- On ET shift to state 50
-- On expr shift to state 128
-- On bloc shift to state 65

State 128:
expr -> expr . DBLEGAL expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . NOTEGAL expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . INF expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . INFEGAL expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . SUP expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . SUPEGAL expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . PLUS expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . MOINS expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . FOIS expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . DIVISE expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . MOD expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . AND expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . OR expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . EGAL expr [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . POINT IDENT [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . POINT LEN LEFTG RIGHTG [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
expr -> expr . LEFTC expr RIGHTC [ SUPEGAL SUP POINT PLUS OR NOTEGAL MOINS MOD LEFTG LEFTC INFEGAL INF FOIS EGAL DIVISE DBLEGAL AND ]
ifb -> IF expr . bloc [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
ifb -> IF expr . bloc ELSE bloc [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
ifb -> IF expr . bloc ELSE ifb [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
-- On SUPEGAL shift to state 59
-- On SUP shift to state 72
-- On POINT shift to state 52
-- On PLUS shift to state 61
-- On OR shift to state 75
-- On NOTEGAL shift to state 77
-- On MOINS shift to state 70
-- On MOD shift to state 63
-- On LEFTG shift to state 30
-- On LEFTC shift to state 57
-- On INFEGAL shift to state 79
-- On INF shift to state 81
-- On FOIS shift to state 66
-- On EGAL shift to state 87
-- On DIVISE shift to state 68
-- On DBLEGAL shift to state 83
-- On AND shift to state 85
-- On bloc shift to state 129

State 129:
ifb -> IF expr bloc . [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
ifb -> IF expr bloc . ELSE bloc [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
ifb -> IF expr bloc . ELSE ifb [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
-- On ELSE shift to state 130
-- On WHILE reduce production ifb -> IF expr bloc 
-- On VEC reduce production ifb -> IF expr bloc 
-- On Tint reduce production ifb -> IF expr bloc 
-- On TRUE reduce production ifb -> IF expr bloc 
-- On RIGHTG reduce production ifb -> IF expr bloc 
-- On RETURN reduce production ifb -> IF expr bloc 
-- On PRINT reduce production ifb -> IF expr bloc 
-- On MOINS reduce production ifb -> IF expr bloc 
-- On LET reduce production ifb -> IF expr bloc 
-- On LEFTPAR reduce production ifb -> IF expr bloc 
-- On LEFTG reduce production ifb -> IF expr bloc 
-- On IF reduce production ifb -> IF expr bloc 
-- On IDENT reduce production ifb -> IF expr bloc 
-- On FOIS reduce production ifb -> IF expr bloc 
-- On FALSE reduce production ifb -> IF expr bloc 
-- On EXCL reduce production ifb -> IF expr bloc 
-- On ETMUT reduce production ifb -> IF expr bloc 
-- On ET reduce production ifb -> IF expr bloc 
-- On ENDLINE reduce production ifb -> IF expr bloc 

State 130:
ifb -> IF expr bloc ELSE . bloc [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
ifb -> IF expr bloc ELSE . ifb [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
-- On LEFTG shift to state 30
-- On IF shift to state 127
-- On ifb shift to state 131
-- On bloc shift to state 132

State 131:
ifb -> IF expr bloc ELSE ifb . [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
-- On WHILE reduce production ifb -> IF expr bloc ELSE ifb 
-- On VEC reduce production ifb -> IF expr bloc ELSE ifb 
-- On Tint reduce production ifb -> IF expr bloc ELSE ifb 
-- On TRUE reduce production ifb -> IF expr bloc ELSE ifb 
-- On RIGHTG reduce production ifb -> IF expr bloc ELSE ifb 
-- On RETURN reduce production ifb -> IF expr bloc ELSE ifb 
-- On PRINT reduce production ifb -> IF expr bloc ELSE ifb 
-- On MOINS reduce production ifb -> IF expr bloc ELSE ifb 
-- On LET reduce production ifb -> IF expr bloc ELSE ifb 
-- On LEFTPAR reduce production ifb -> IF expr bloc ELSE ifb 
-- On LEFTG reduce production ifb -> IF expr bloc ELSE ifb 
-- On IF reduce production ifb -> IF expr bloc ELSE ifb 
-- On IDENT reduce production ifb -> IF expr bloc ELSE ifb 
-- On FOIS reduce production ifb -> IF expr bloc ELSE ifb 
-- On FALSE reduce production ifb -> IF expr bloc ELSE ifb 
-- On EXCL reduce production ifb -> IF expr bloc ELSE ifb 
-- On ETMUT reduce production ifb -> IF expr bloc ELSE ifb 
-- On ET reduce production ifb -> IF expr bloc ELSE ifb 
-- On ENDLINE reduce production ifb -> IF expr bloc ELSE ifb 

State 132:
ifb -> IF expr bloc ELSE bloc . [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
-- On WHILE reduce production ifb -> IF expr bloc ELSE bloc 
-- On VEC reduce production ifb -> IF expr bloc ELSE bloc 
-- On Tint reduce production ifb -> IF expr bloc ELSE bloc 
-- On TRUE reduce production ifb -> IF expr bloc ELSE bloc 
-- On RIGHTG reduce production ifb -> IF expr bloc ELSE bloc 
-- On RETURN reduce production ifb -> IF expr bloc ELSE bloc 
-- On PRINT reduce production ifb -> IF expr bloc ELSE bloc 
-- On MOINS reduce production ifb -> IF expr bloc ELSE bloc 
-- On LET reduce production ifb -> IF expr bloc ELSE bloc 
-- On LEFTPAR reduce production ifb -> IF expr bloc ELSE bloc 
-- On LEFTG reduce production ifb -> IF expr bloc ELSE bloc 
-- On IF reduce production ifb -> IF expr bloc ELSE bloc 
-- On IDENT reduce production ifb -> IF expr bloc ELSE bloc 
-- On FOIS reduce production ifb -> IF expr bloc ELSE bloc 
-- On FALSE reduce production ifb -> IF expr bloc ELSE bloc 
-- On EXCL reduce production ifb -> IF expr bloc ELSE bloc 
-- On ETMUT reduce production ifb -> IF expr bloc ELSE bloc 
-- On ET reduce production ifb -> IF expr bloc ELSE bloc 
-- On ENDLINE reduce production ifb -> IF expr bloc ELSE bloc 

State 133:
instr -> ENDLINE . [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
-- On WHILE reduce production instr -> ENDLINE 
-- On VEC reduce production instr -> ENDLINE 
-- On Tint reduce production instr -> ENDLINE 
-- On TRUE reduce production instr -> ENDLINE 
-- On RIGHTG reduce production instr -> ENDLINE 
-- On RETURN reduce production instr -> ENDLINE 
-- On PRINT reduce production instr -> ENDLINE 
-- On MOINS reduce production instr -> ENDLINE 
-- On LET reduce production instr -> ENDLINE 
-- On LEFTPAR reduce production instr -> ENDLINE 
-- On LEFTG reduce production instr -> ENDLINE 
-- On IF reduce production instr -> ENDLINE 
-- On IDENT reduce production instr -> ENDLINE 
-- On FOIS reduce production instr -> ENDLINE 
-- On FALSE reduce production instr -> ENDLINE 
-- On EXCL reduce production instr -> ENDLINE 
-- On ETMUT reduce production instr -> ENDLINE 
-- On ET reduce production instr -> ENDLINE 
-- On ENDLINE reduce production instr -> ENDLINE 

State 134:
blockbody -> instr . blockbody [ RIGHTG ]
blockbody -> instr . [ RIGHTG ]
-- On WHILE shift to state 31
-- On VEC shift to state 32
-- On Tint shift to state 35
-- On TRUE shift to state 36
-- On RETURN shift to state 105
-- On PRINT shift to state 37
-- On MOINS shift to state 42
-- On LET shift to state 109
-- On LEFTPAR shift to state 43
-- On LEFTG shift to state 30
-- On IF shift to state 127
-- On IDENT shift to state 44
-- On FOIS shift to state 46
-- On FALSE shift to state 47
-- On EXCL shift to state 48
-- On ETMUT shift to state 49
-- On ET shift to state 50
-- On ENDLINE shift to state 133
-- On instr shift to state 134
-- On ifb shift to state 135
-- On expr shift to state 136
-- On blockbody shift to state 138
-- On bloc shift to state 65
-- On RIGHTG reduce production blockbody -> instr 

State 135:
instr -> ifb . [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
-- On WHILE reduce production instr -> ifb 
-- On VEC reduce production instr -> ifb 
-- On Tint reduce production instr -> ifb 
-- On TRUE reduce production instr -> ifb 
-- On RIGHTG reduce production instr -> ifb 
-- On RETURN reduce production instr -> ifb 
-- On PRINT reduce production instr -> ifb 
-- On MOINS reduce production instr -> ifb 
-- On LET reduce production instr -> ifb 
-- On LEFTPAR reduce production instr -> ifb 
-- On LEFTG reduce production instr -> ifb 
-- On IF reduce production instr -> ifb 
-- On IDENT reduce production instr -> ifb 
-- On FOIS reduce production instr -> ifb 
-- On FALSE reduce production instr -> ifb 
-- On EXCL reduce production instr -> ifb 
-- On ETMUT reduce production instr -> ifb 
-- On ET reduce production instr -> ifb 
-- On ENDLINE reduce production instr -> ifb 

State 136:
blockbody -> expr . [ RIGHTG ]
expr -> expr . DBLEGAL expr [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . NOTEGAL expr [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . INF expr [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . INFEGAL expr [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . SUP expr [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . SUPEGAL expr [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . PLUS expr [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . MOINS expr [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . FOIS expr [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . DIVISE expr [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . MOD expr [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . AND expr [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . OR expr [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . EGAL expr [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . POINT IDENT [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . POINT LEN LEFTG RIGHTG [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
expr -> expr . LEFTC expr RIGHTC [ SUPEGAL SUP RIGHTG POINT PLUS OR NOTEGAL MOINS MOD LEFTC INFEGAL INF FOIS ENDLINE EGAL DIVISE DBLEGAL AND ]
instr -> expr . ENDLINE [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
-- On SUPEGAL shift to state 59
-- On SUP shift to state 72
-- On POINT shift to state 52
-- On PLUS shift to state 61
-- On OR shift to state 75
-- On NOTEGAL shift to state 77
-- On MOINS shift to state 70
-- On MOD shift to state 63
-- On LEFTC shift to state 57
-- On INFEGAL shift to state 79
-- On INF shift to state 81
-- On FOIS shift to state 66
-- On ENDLINE shift to state 137
-- On EGAL shift to state 87
-- On DIVISE shift to state 68
-- On DBLEGAL shift to state 83
-- On AND shift to state 85
-- On RIGHTG reduce production blockbody -> expr 

State 137:
instr -> expr ENDLINE . [ WHILE VEC Tint TRUE RIGHTG RETURN PRINT MOINS LET LEFTPAR LEFTG IF IDENT FOIS FALSE EXCL ETMUT ET ENDLINE ]
-- On WHILE reduce production instr -> expr ENDLINE 
-- On VEC reduce production instr -> expr ENDLINE 
-- On Tint reduce production instr -> expr ENDLINE 
-- On TRUE reduce production instr -> expr ENDLINE 
-- On RIGHTG reduce production instr -> expr ENDLINE 
-- On RETURN reduce production instr -> expr ENDLINE 
-- On PRINT reduce production instr -> expr ENDLINE 
-- On MOINS reduce production instr -> expr ENDLINE 
-- On LET reduce production instr -> expr ENDLINE 
-- On LEFTPAR reduce production instr -> expr ENDLINE 
-- On LEFTG reduce production instr -> expr ENDLINE 
-- On IF reduce production instr -> expr ENDLINE 
-- On IDENT reduce production instr -> expr ENDLINE 
-- On FOIS reduce production instr -> expr ENDLINE 
-- On FALSE reduce production instr -> expr ENDLINE 
-- On EXCL reduce production instr -> expr ENDLINE 
-- On ETMUT reduce production instr -> expr ENDLINE 
-- On ET reduce production instr -> expr ENDLINE 
-- On ENDLINE reduce production instr -> expr ENDLINE 

State 138:
blockbody -> instr blockbody . [ RIGHTG ]
-- On RIGHTG reduce production blockbody -> instr blockbody 

State 139:
bloc -> LEFTG blockbody . RIGHTG [ WHILE VEC Tint TRUE SUPEGAL SUP STRUCT RIGHTPAR RIGHTG RIGHTC RETURN PRINT POINT PLUS OR NOTEGAL MOINS MOD LET LEFTPAR LEFTG LEFTC INFEGAL INF IF IDENT FOIS FN FALSE EXCL ETMUT ET EOF ENDLINE ELSE EGAL DIVISE DBLEGAL COMMA AND ]
-- On RIGHTG shift to state 140

State 140:
bloc -> LEFTG blockbody RIGHTG . [ WHILE VEC Tint TRUE SUPEGAL SUP STRUCT RIGHTPAR RIGHTG RIGHTC RETURN PRINT POINT PLUS OR NOTEGAL MOINS MOD LET LEFTPAR LEFTG LEFTC INFEGAL INF IF IDENT FOIS FN FALSE EXCL ETMUT ET EOF ENDLINE ELSE EGAL DIVISE DBLEGAL COMMA AND ]
-- On WHILE reduce production bloc -> LEFTG blockbody RIGHTG 
-- On VEC reduce production bloc -> LEFTG blockbody RIGHTG 
-- On Tint reduce production bloc -> LEFTG blockbody RIGHTG 
-- On TRUE reduce production bloc -> LEFTG blockbody RIGHTG 
-- On SUPEGAL reduce production bloc -> LEFTG blockbody RIGHTG 
-- On SUP reduce production bloc -> LEFTG blockbody RIGHTG 
-- On STRUCT reduce production bloc -> LEFTG blockbody RIGHTG 
-- On RIGHTPAR reduce production bloc -> LEFTG blockbody RIGHTG 
-- On RIGHTG reduce production bloc -> LEFTG blockbody RIGHTG 
-- On RIGHTC reduce production bloc -> LEFTG blockbody RIGHTG 
-- On RETURN reduce production bloc -> LEFTG blockbody RIGHTG 
-- On PRINT reduce production bloc -> LEFTG blockbody RIGHTG 
-- On POINT reduce production bloc -> LEFTG blockbody RIGHTG 
-- On PLUS reduce production bloc -> LEFTG blockbody RIGHTG 
-- On OR reduce production bloc -> LEFTG blockbody RIGHTG 
-- On NOTEGAL reduce production bloc -> LEFTG blockbody RIGHTG 
-- On MOINS reduce production bloc -> LEFTG blockbody RIGHTG 
-- On MOD reduce production bloc -> LEFTG blockbody RIGHTG 
-- On LET reduce production bloc -> LEFTG blockbody RIGHTG 
-- On LEFTPAR reduce production bloc -> LEFTG blockbody RIGHTG 
-- On LEFTG reduce production bloc -> LEFTG blockbody RIGHTG 
-- On LEFTC reduce production bloc -> LEFTG blockbody RIGHTG 
-- On INFEGAL reduce production bloc -> LEFTG blockbody RIGHTG 
-- On INF reduce production bloc -> LEFTG blockbody RIGHTG 
-- On IF reduce production bloc -> LEFTG blockbody RIGHTG 
-- On IDENT reduce production bloc -> LEFTG blockbody RIGHTG 
-- On FOIS reduce production bloc -> LEFTG blockbody RIGHTG 
-- On FN reduce production bloc -> LEFTG blockbody RIGHTG 
-- On FALSE reduce production bloc -> LEFTG blockbody RIGHTG 
-- On EXCL reduce production bloc -> LEFTG blockbody RIGHTG 
-- On ETMUT reduce production bloc -> LEFTG blockbody RIGHTG 
-- On ET reduce production bloc -> LEFTG blockbody RIGHTG 
-- On EOF reduce production bloc -> LEFTG blockbody RIGHTG 
-- On ENDLINE reduce production bloc -> LEFTG blockbody RIGHTG 
-- On ELSE reduce production bloc -> LEFTG blockbody RIGHTG 
-- On EGAL reduce production bloc -> LEFTG blockbody RIGHTG 
-- On DIVISE reduce production bloc -> LEFTG blockbody RIGHTG 
-- On DBLEGAL reduce production bloc -> LEFTG blockbody RIGHTG 
-- On COMMA reduce production bloc -> LEFTG blockbody RIGHTG 
-- On AND reduce production bloc -> LEFTG blockbody RIGHTG 

State 141:
decl_fun -> FN IDENT LEFTPAR list(argument) RIGHTPAR MOINS SUP typ bloc . [ STRUCT FN EOF ]
-- On STRUCT reduce production decl_fun -> FN IDENT LEFTPAR list(argument) RIGHTPAR MOINS SUP typ bloc 
-- On FN reduce production decl_fun -> FN IDENT LEFTPAR list(argument) RIGHTPAR MOINS SUP typ bloc 
-- On EOF reduce production decl_fun -> FN IDENT LEFTPAR list(argument) RIGHTPAR MOINS SUP typ bloc 

State 142:
decl_fun -> FN IDENT LEFTPAR list(argument) RIGHTPAR bloc . [ STRUCT FN EOF ]
-- On STRUCT reduce production decl_fun -> FN IDENT LEFTPAR list(argument) RIGHTPAR bloc 
-- On FN reduce production decl_fun -> FN IDENT LEFTPAR list(argument) RIGHTPAR bloc 
-- On EOF reduce production decl_fun -> FN IDENT LEFTPAR list(argument) RIGHTPAR bloc 

State 143:
argument -> boption(MUT) . IDENT TO typ [ RIGHTPAR MUT IDENT ]
-- On IDENT shift to state 144

State 144:
argument -> boption(MUT) IDENT . TO typ [ RIGHTPAR MUT IDENT ]
-- On TO shift to state 145

State 145:
argument -> boption(MUT) IDENT TO . typ [ RIGHTPAR MUT IDENT ]
-- On IDENT shift to state 6
-- On ET shift to state 8
-- On typ shift to state 146

State 146:
argument -> boption(MUT) IDENT TO typ . [ RIGHTPAR MUT IDENT ]
-- On RIGHTPAR reduce production argument -> boption(MUT) IDENT TO typ 
-- On MUT reduce production argument -> boption(MUT) IDENT TO typ 
-- On IDENT reduce production argument -> boption(MUT) IDENT TO typ 

State 147:
list(argument) -> argument . list(argument) [ RIGHTPAR ]
-- On MUT shift to state 24
-- On list(argument) shift to state 148
-- On boption(MUT) shift to state 143
-- On argument shift to state 147
-- On RIGHTPAR reduce production list(argument) -> 
-- On IDENT reduce production boption(MUT) -> 

State 148:
list(argument) -> argument list(argument) . [ RIGHTPAR ]
-- On RIGHTPAR reduce production list(argument) -> argument list(argument) 

State 149:
fichier -> list(decl) . EOF [ # ]
-- On EOF shift to state 150

State 150:
fichier -> list(decl) EOF . [ # ]
-- On # reduce production fichier -> list(decl) EOF 

State 151:
fichier' -> fichier . [ # ]
-- On # accept fichier

State 152:
decl -> decl_struct . [ STRUCT FN EOF ]
-- On STRUCT reduce production decl -> decl_struct 
-- On FN reduce production decl -> decl_struct 
-- On EOF reduce production decl -> decl_struct 

State 153:
decl -> decl_fun . [ STRUCT FN EOF ]
-- On STRUCT reduce production decl -> decl_fun 
-- On FN reduce production decl -> decl_fun 
-- On EOF reduce production decl -> decl_fun 

State 154:
list(decl) -> decl . list(decl) [ EOF ]
-- On STRUCT shift to state 1
-- On FN shift to state 21
-- On list(decl) shift to state 155
-- On decl_struct shift to state 152
-- On decl_fun shift to state 153
-- On decl shift to state 154
-- On EOF reduce production list(decl) -> 

State 155:
list(decl) -> decl list(decl) . [ EOF ]
-- On EOF reduce production list(decl) -> decl list(decl) 

